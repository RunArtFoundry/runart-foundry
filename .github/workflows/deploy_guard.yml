name: Deploy Guard

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'runart-base/**'
      - 'tools/deploy/**'
      - 'docs/deploy/**'
      - '.github/workflows/deploy_guard.yml'

jobs:
  # ============================================================================
  # Job 1: Lint Documentation
  # ============================================================================
  lint-docs:
    name: üìö Lint Deploy Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check documentation files exist
        run: |
          echo "üîç Verificando archivos de documentaci√≥n..."
          
          required_files=(
            "docs/deploy/DEPLOY_FRAMEWORK.md"
            "docs/deploy/DEPLOY_ROLLOUT_PLAN.md"
            "docs/deploy/DEPLOY_ROLLBACK.md"
            "docs/deploy/DEPLOY_FAQ.md"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "‚ùå ERROR: Archivos faltantes:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi
          
          echo "‚úÖ Todos los archivos de documentaci√≥n presentes"
      
      - name: Lint Markdown files
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: 'docs/deploy/*.md'
          config: .markdownlint.json
        continue-on-error: true
      
      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.markdown-link-check.json'
          folder-path: 'docs/deploy/'
        continue-on-error: true

  # ============================================================================
  # Job 2: Policy Enforcement
  # ============================================================================
  policy-enforcement:
    name: üîí Enforce Deployment Policies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate security defaults
        run: |
          echo "üîç Validando defaults de seguridad en deploy_theme.sh..."
          
          script="tools/deploy/deploy_theme.sh"
          
          # Validar CI-GUARD marker presente
          if ! grep -q "CI-GUARD" "$script"; then
            echo "‚ùå ERROR: Marker CI-GUARD no encontrado en script"
            exit 1
          fi
          
          # Validar defaults seguros
          if ! grep -q "readonly DEFAULT_READ_ONLY=1" "$script"; then
            echo "‚ùå ERROR: DEFAULT_READ_ONLY debe ser 1"
            exit 1
          fi
          
          if ! grep -q "readonly DEFAULT_DRY_RUN=1" "$script"; then
            echo "‚ùå ERROR: DEFAULT_DRY_RUN debe ser 1"
            exit 1
          fi
          
          if ! grep -q "readonly DEFAULT_REAL_DEPLOY=0" "$script"; then
            echo "‚ùå ERROR: DEFAULT_REAL_DEPLOY debe ser 0"
            exit 1
          fi
          
          if ! grep -q 'readonly DEFAULT_THEME_DIR="runart-base"' "$script"; then
            echo "‚ùå ERROR: DEFAULT_THEME_DIR debe ser 'runart-base'"
            exit 1
          fi
          
          echo "‚úÖ Defaults de seguridad validados correctamente"
      
      - name: Check PR labels for deployment approval
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Verificando labels de aprobaci√≥n de deployment..."
          
          pr_number="${{ github.event.pull_request.number }}"
          
          # Obtener labels del PR
          labels=$(gh pr view "$pr_number" --json labels --jq '.labels[].name')
          
          # Verificar si hay cambios en runart-base/
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "^runart-base/"; then
            echo "üì¶ Cambios detectados en runart-base/"
            
            # Para deployments reales (si se detectan), requiere label
            if echo "$labels" | grep -q "deployment-approved"; then
              echo "‚úÖ Label 'deployment-approved' presente"
            else
              echo "‚ö†Ô∏è  ADVERTENCIA: Cambios en tema sin label 'deployment-approved'"
              echo "    Este PR podr√° mergearse pero deployment real requerir√° aprobaci√≥n"
            fi
          fi
          
          # Verificar si hay cambios en media
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "wp-content/uploads/"; then
            echo "üì∏ Cambios detectados en wp-content/uploads/"
            
            if echo "$labels" | grep -q "media-review"; then
              echo "‚úÖ Label 'media-review' presente"
            else
              echo "‚ùå ERROR: Cambios en media requieren label 'media-review'"
              echo "   A√±adir label con: gh pr edit $pr_number --add-label media-review"
              exit 1
            fi
          fi
          
          # Bloquear production sin maintenance-window
          if echo "$labels" | grep -q "production"; then
            if echo "$labels" | grep -q "maintenance-window"; then
              echo "‚úÖ Label 'maintenance-window' presente para producci√≥n"
            else
              echo "‚ùå ERROR: Deployment a producci√≥n requiere label 'maintenance-window'"
              echo "   Ver docs/deploy/DEPLOY_FRAMEWORK.md para procedimiento"
              exit 1
            fi
          fi
          
          echo "‚úÖ Validaci√≥n de labels completada"

  # ============================================================================
  # Job 3: Simulation
  # ============================================================================
  simulation:
    name: üß™ Run Deployment Simulation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          echo "üîß Configurando entorno de simulaci√≥n..."
          
          # Crear archivo de entorno mock
          cat > ~/.runart_staging_env << 'EOF'
          export STAGING_HOST="access958591985.webspace-data.io"
          export STAGING_USER="u111876951"
          export STAGING_WP_PATH="/homepages/7/d958591985/htdocs/staging"
          export SSH_KEY_PATH="$HOME/.ssh/id_rsa_ionos"
          EOF
          
          # Mock SSH key (no funcional, solo para bypass de validaci√≥n)
          mkdir -p ~/.ssh
          touch ~/.ssh/id_rsa_ionos
          chmod 600 ~/.ssh/id_rsa_ionos
      
      - name: Run deployment in DRY_RUN mode
        run: |
          echo "üöÄ Ejecutando simulaci√≥n de deployment..."
          
          # Ejecutar script en modo simulaci√≥n con SKIP_SSH=1 (CI no tiene acceso SSH real)
          READ_ONLY=1 \
          DRY_RUN=1 \
          REAL_DEPLOY=0 \
          SKIP_SSH=1 \
          TARGET=staging \
          THEME_DIR=runart-base \
          ./tools/deploy/deploy_theme.sh || {
            echo "‚ùå ERROR: Simulaci√≥n de deployment fallida"
            exit 1
          }
      
      - name: Check simulation logs
        run: |
          echo "üìã Revisando logs de simulaci√≥n..."
          
          # Buscar log m√°s reciente
          latest_log=$(find _reports/deploy_logs/ -name "DEPLOY_*.md" -type f -printf '%T@ %p\n' | sort -rn | head -1 | cut -d' ' -f2-)
          
          if [ -z "$latest_log" ]; then
            echo "‚ùå ERROR: No se encontr√≥ log de simulaci√≥n"
            exit 1
          fi
          
          echo "üìÑ Log encontrado: $latest_log"
          
          # Verificar que contiene informaci√≥n esperada
          if ! grep -q "Modo: SIMULATION" "$latest_log"; then
            echo "‚ùå ERROR: Log no contiene informaci√≥n de simulaci√≥n"
            exit 1
          fi
          
          echo "‚úÖ Log de simulaci√≥n validado"
          
          # Mostrar resumen
          echo ""
          echo "=== RESUMEN DE SIMULACI√ìN ==="
          grep -A 5 "## Results Summary" "$latest_log" || echo "Resumen no disponible"
      
      - name: Upload simulation logs
        uses: actions/upload-artifact@v4
        with:
          name: simulation-logs
          path: _reports/deploy_logs/DEPLOY_*.md
          retention-days: 30
      
      - name: Comment on PR with simulation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Encontrar log m√°s reciente
            const logsDir = '_reports/deploy_logs';
            const files = fs.readdirSync(logsDir)
              .filter(f => f.startsWith('DEPLOY_') && f.endsWith('.md'))
              .map(f => ({
                name: f,
                path: path.join(logsDir, f),
                time: fs.statSync(path.join(logsDir, f)).mtime.getTime()
              }))
              .sort((a, b) => b.time - a.time);
            
            if (files.length === 0) {
              console.log('No se encontraron logs de simulaci√≥n');
              return;
            }
            
            const logContent = fs.readFileSync(files[0].path, 'utf8');
            
            // Extraer resumen
            const summaryMatch = logContent.match(/## Results Summary[\s\S]*?---/);
            const summary = summaryMatch ? summaryMatch[0] : 'Resumen no disponible';
            
            // Crear comentario
            const comment = `## üß™ Simulaci√≥n de Deployment
            
            La simulaci√≥n de deployment se ejecut√≥ exitosamente en CI.
            
            ${summary}
            
            **Logs completos disponibles en artifact:** \`simulation-logs\`
            
            **Pr√≥ximos pasos:**
            - Revisar archivos que se modificar√≠an
            - Si todo es correcto, a√±adir label \`deployment-approved\`
            - Tras merge, ejecutar deployment real a staging
            
            ---
            *Generado por Deploy Guard CI*`;
            
            // Publicar comentario
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # ============================================================================
  # Summary
  # ============================================================================
  summary:
    name: üìä Deployment Guard Summary
    runs-on: ubuntu-latest
    needs: [lint-docs, policy-enforcement, simulation]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "üìä Resumen de Deploy Guard:"
          echo ""
          echo "  üìö Lint Docs: ${{ needs.lint-docs.result }}"
          echo "  üîí Policy Enforcement: ${{ needs.policy-enforcement.result }}"
          echo "  üß™ Simulation: ${{ needs.simulation.result }}"
          echo ""
          
          # Determinar estado final
          if [ "${{ needs.lint-docs.result }}" = "success" ] && \
             [ "${{ needs.policy-enforcement.result }}" = "success" ] && \
             [ "${{ needs.simulation.result }}" = "success" ]; then
            echo "‚úÖ Deploy Guard: PASSED"
            exit 0
          else
            echo "‚ùå Deploy Guard: FAILED"
            echo ""
            echo "Revisar logs de jobs fallidos arriba"
            exit 1
          fi
