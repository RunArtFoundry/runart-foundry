name: Cloudflare Tokens Verification

on:
  pull_request:
    paths:
      - 'scripts/**'
      - 'tools/ci/**'
      - '.github/workflows/**'
      - 'security/credentials/**'
  schedule:
    # Lunes a las 09:00 UTC (verificación semanal)
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to verify (repo, preview, production)'
        required: false
        default: 'repo'
        type: choice
        options:
          - repo
          - preview
          - production

jobs:
  verify-tokens:
    name: Verify CF Tokens
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: 
          - repo
          - preview
          - production
      fail-fast: false
    env:
      # Inyectar tokens según matrix environment
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Verify CF tokens and scopes
        id: verify
        run: |
          # Override matrix si workflow_dispatch especifica environment
          ENV_TARGET="${{ github.event.inputs.environment || matrix.environment }}"
          
          echo "🔍 Verificando environment: $ENV_TARGET"
          echo "environment=$ENV_TARGET" >> "$GITHUB_OUTPUT"
          
          # Ejecutar verificación
          ./tools/ci/check_cf_scopes.sh "$ENV_TARGET"

      - name: Create Job Summary
        if: always()
        run: |
          ENV_TARGET="${{ steps.verify.outputs.environment }}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          echo "## 🔒 Cloudflare Token Verification" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`$ENV_TARGET\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $TIMESTAMP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.verify.outcome }}" == "success" ]; then
            echo "### ✅ Verification Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- All required Cloudflare tokens are present and valid" >> $GITHUB_STEP_SUMMARY
            echo "- Scopes verification passed" >> $GITHUB_STEP_SUMMARY
            echo "- No action required" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Verification Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- One or more Cloudflare tokens failed verification" >> $GITHUB_STEP_SUMMARY
            echo "- Check token validity and scopes in Cloudflare Dashboard" >> $GITHUB_STEP_SUMMARY
            echo "- Review job logs for specific errors" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Required Scopes:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`com.cloudflare.api.account.zone:read\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`com.cloudflare.edge.worker.script:read\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`com.cloudflare.edge.worker.kv:edit\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`com.cloudflare.api.account.zone.page:edit\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by .github/workflows/ci_cloudflare_tokens_verify.yml*" >> $GITHUB_STEP_SUMMARY

  # Job separado para abrir issue automático si verificación falla
  create-issue-on-failure:
    name: Create Issue on Failure
    needs: verify-tokens
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'schedule'
    permissions:
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create or update issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'Cloudflare Token Verification Failed';
            const body = `## 🚨 Automated Token Verification Failed
            
            **Timestamp:** ${new Date().toISOString()}
            **Workflow:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            **Trigger:** Scheduled verification (weekly)
            
            ### Issue
            One or more Cloudflare API tokens failed verification during scheduled check.
            
            ### Required Actions
            - [ ] Check token validity in Cloudflare Dashboard
            - [ ] Verify token scopes match requirements
            - [ ] Update tokens if expired or insufficient permissions
            - [ ] Re-run verification workflow to confirm fix
            
            ### Required Scopes
            - \`com.cloudflare.api.account.zone:read\`
            - \`com.cloudflare.edge.worker.script:read\` 
            - \`com.cloudflare.edge.worker.kv:edit\`
            - \`com.cloudflare.api.account.zone.page:edit\`
            
            ### Troubleshooting
            1. Go to [Cloudflare Dashboard > My Profile > API Tokens](https://dash.cloudflare.com/profile/api-tokens)
            2. Verify tokens are active and not expired
            3. Check that scopes match requirements above
            4. Update GitHub secrets if needed: \`CLOUDFLARE_API_TOKEN\`, \`CF_API_TOKEN\`
            
            ---
            *This issue was created automatically by .github/workflows/ci_cloudflare_tokens_verify.yml*
            `;
            
            // Buscar issue existente
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['automation', 'cloudflare', 'tokens']
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Cloudflare Token Verification Failed')
            );
            
            if (existingIssue) {
              // Actualizar issue existente
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## 🔄 Verification Still Failing\n\n**New failure:** ${new Date().toISOString()}\n**Workflow:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\nPlease address the token issues above.`
              });
              
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Crear nuevo issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automation', 'cloudflare', 'tokens', 'high-priority']
              });
              
              console.log(`Created new issue #${newIssue.data.number}`);
            }