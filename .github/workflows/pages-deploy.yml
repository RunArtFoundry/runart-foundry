name: Deploy to Cloudflare Pages (Briefing)

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/briefing/**'
      - 'docs/**'
      - '.github/workflows/pages-deploy.yml'
  workflow_dispatch:

permissions:
  contents: write
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: deploy-prod
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install mkdocs mkdocs-material jinja2 jsonschema

      - name: Build MkDocs (Briefing app)
        working-directory: apps/briefing
        run: |
          mkdocs build -d site
          test -d site && test -f site/index.html

      - name: Registrar SHA para correlación
        id: sha
        run: |
          echo "short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: runart-foundry
          directory: apps/briefing/site
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Output deploy URLs
        id: note
        run: |
          echo "DEPLOY_MAIN=https://runart-foundry.pages.dev" >> $GITHUB_OUTPUT

      - name: Append deploy note to meta
        run: |
          echo "" >> docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md
          echo "- Deploy ejecutado: $(date -u +%FT%TZ) | SHA: ${{ steps.sha.outputs.short }} | dir: site" >> docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md
          echo "  URL: https://runart-foundry.pages.dev" >> docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md

      - name: Commit meta log
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md
          git commit -m "docs(meta): log deploy Pages [skip ci]" || true
          git push || true

      - name: Purge Cloudflare Cache (opcional)
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
        run: |
          if [ -n "$CF_ZONE_ID" ]; then
            echo "ℹ️  CF_ZONE_ID disponible; purgando cache..."
            curl -sS -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}' | tee purge_result.json
            if grep -q '"success":true' purge_result.json; then
              echo "✅ Cache purgada exitosamente"
              echo "- Cache purge OK: $(date -u +%FT%TZ)" >> docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md
            else
              echo "⚠️  Purge falló; no crítico"
            fi
          else
            echo "ℹ️  CF_ZONE_ID no configurado; saltando purge de cache (no crítico)"
          fi
        continue-on-error: true
