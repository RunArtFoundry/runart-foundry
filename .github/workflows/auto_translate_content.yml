name: Auto Translate Content (EN→ES)

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry-run (no crear páginas)'
        type: boolean
        default: true
      batch_size:
        description: 'Número de páginas a traducir'
        type: number
        default: 3
  schedule:
    - cron: '0 3 * * *'  # nightly check

jobs:
  translate:
    runs-on: ubuntu-latest
    env:
      # Entorno
      APP_ENV: staging
      WP_BASE_URL: ${{ vars.WP_BASE_URL || 'https://staging.runartfoundry.com' }}
      WP_USER: ${{ secrets.WP_USER }}
      WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
      
      # Control de traducción
      AUTO_TRANSLATE_ENABLED: ${{ vars.AUTO_TRANSLATE_ENABLED || 'false' }}
      DRY_RUN: ${{ github.event.inputs.dry_run || 'true' }}
      TRANSLATION_BATCH_SIZE: ${{ github.event.inputs.batch_size || '3' }}
      
      # Proveedor (deepl | openai | auto)
      TRANSLATION_PROVIDER: ${{ vars.TRANSLATION_PROVIDER || 'auto' }}
      DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      TRANSLATION_API_KEY: ${{ secrets.TRANSLATION_API_KEY }}
      
      # OpenAI específico
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}
      OPENAI_TEMPERATURE: ${{ vars.OPENAI_TEMPERATURE || '0.3' }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Show provider configuration
        run: |
          echo "🌐 Translation Provider Configuration"
          echo "======================================"
          echo "Mode: $TRANSLATION_PROVIDER"
          echo "DeepL available: ${{ secrets.DEEPL_API_KEY != '' }}"
          echo "OpenAI available: ${{ secrets.OPENAI_API_KEY != '' }}"
          if [ "$TRANSLATION_PROVIDER" = "openai" ] || [ "$TRANSLATION_PROVIDER" = "auto" ]; then
            echo "OpenAI model: $OPENAI_MODEL"
            echo "OpenAI temperature: $OPENAI_TEMPERATURE"
          fi
          echo "======================================"
          
      - name: Run auto-translate
        id: translate
        run: |
          python tools/auto_translate_content.py
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload logs (JSON + TXT)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auto-translate-logs-${{ github.run_number }}
          path: docs/ops/logs/auto_translate_*.log
          
      - name: Upload JSON artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auto-translate-report-${{ github.run_number }}
          path: docs/ops/logs/auto_translate_*.json
          
      - name: Job Summary
        if: always()
        run: |
          echo "## Auto-Translate Run Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $APP_ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Base URL**: $WP_BASE_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Provider Mode**: $TRANSLATION_PROVIDER" >> $GITHUB_STEP_SUMMARY
          echo "- **Enabled**: $AUTO_TRANSLATE_ENABLED" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry-run**: $DRY_RUN" >> $GITHUB_STEP_SUMMARY
          echo "- **Batch size**: $TRANSLATION_BATCH_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f docs/ops/logs/auto_translate_*.json ]; then
            LATEST_JSON=$(ls -t docs/ops/logs/auto_translate_*.json | head -1)
            echo "### Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extraer proveedor usado
            PROVIDER_USED=$(jq -r '.provider_selected // "none"' "$LATEST_JSON")
            echo "**Provider Used**: $PROVIDER_USED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "**Statistics**:" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq -r '.stats' "$LATEST_JSON" >> $GITHUB_STEP_SUMMARY || echo "{}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
