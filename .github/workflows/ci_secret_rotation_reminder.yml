name: Secret Rotation Reminder

on:
  schedule:
    # Primer lunes de cada mes a las 09:00 UTC
    - cron: '0 9 1-7 * 1'
  workflow_dispatch:
    inputs:
      token_name:
        description: 'Token específico para verificar (opcional)'
        required: false
        type: string
      days_threshold:
        description: 'Días antes de expiración para crear issue'
        required: false
        default: '30'
        type: string

jobs:
  check-rotation-schedule:
    name: Check Token Rotation Schedule
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for date calculations
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check token rotation schedule
        id: check
        run: |
          TOKENS_CONFIG="security/credentials/cloudflare_tokens.json"
          THRESHOLD_DAYS="${{ github.event.inputs.days_threshold || '30' }}"
          SPECIFIC_TOKEN="${{ github.event.inputs.token_name }}"
          TODAY=$(date -u +%Y-%m-%d)
          
          echo "🔍 VERIFICACIÓN DE ROTACIÓN DE TOKENS"
          echo "====================================="
          echo "Fecha actual: $TODAY"
          echo "Umbral de días: $THRESHOLD_DAYS"
          echo "Token específico: ${SPECIFIC_TOKEN:-'todos'}"
          echo ""
          
          if [ ! -f "$TOKENS_CONFIG" ]; then
            echo "❌ Archivo de configuración no encontrado: $TOKENS_CONFIG"
            exit 1
          fi
          
          # Función para calcular días entre fechas
          calculate_days_diff() {
            local date1="$1"
            local date2="$2"
            local d1_sec d2_sec diff_sec diff_days
            
            d1_sec=$(date -d "$date1" +%s 2>/dev/null || echo "0")
            d2_sec=$(date -d "$date2" +%s 2>/dev/null || echo "0")
            
            if [ "$d1_sec" -eq 0 ] || [ "$d2_sec" -eq 0 ]; then
              echo "999"  # Error en fechas
              return
            fi
            
            diff_sec=$((d2_sec - d1_sec))
            diff_days=$((diff_sec / 86400))
            echo "$diff_days"
          }
          
          # Verificar si jq está disponible
          if ! command -v jq &> /dev/null; then
            echo "❌ jq no disponible - instalando..."
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # Lista de tokens a verificar
          if [ -n "$SPECIFIC_TOKEN" ]; then
            TOKEN_LIST="$SPECIFIC_TOKEN"
          else
            TOKEN_LIST=$(jq -r '.tokens | keys[]' "$TOKENS_CONFIG")
          fi
          
          ISSUES_TO_CREATE=""
          
          echo "📊 Analizando tokens..."
          echo ""
          
          for token_name in $TOKEN_LIST; do
            echo "🔍 Verificando: $token_name"
            
            token_info=$(jq -r ".tokens[\"$token_name\"] // empty" "$TOKENS_CONFIG")
            if [ -z "$token_info" ]; then
              echo "  ❌ Token no encontrado en configuración"
              continue
            fi
            
            status=$(echo "$token_info" | jq -r '.status // "unknown"')
            next_rotation=$(echo "$token_info" | jq -r '.next_rotation // "unknown"')
            
            echo "  • Estado: $status"
            echo "  • Próxima rotación: $next_rotation"
            
            # Saltar tokens deprecated
            if [ "$status" = "deprecated" ]; then
              echo "  ⏭️  Saltando token deprecated"
              echo ""
              continue
            fi
            
            # Calcular días hasta rotación
            if [ "$next_rotation" != "unknown" ] && [ "$next_rotation" != "null" ]; then
              days_until=$(calculate_days_diff "$TODAY" "$next_rotation")
              
              echo "  • Días hasta rotación: $days_until"
              
              if [ "$days_until" -le "$THRESHOLD_DAYS" ] && [ "$days_until" -ge -7 ]; then
                echo "  🚨 Requiere rotación pronto!"
                ISSUES_TO_CREATE="$ISSUES_TO_CREATE $token_name:$days_until"
              else
                echo "  ✅ Rotación dentro del plazo"
              fi
            else
              echo "  ⚠️  Fecha de rotación no definida"
            fi
            
            echo ""
          done
          
          # Guardar resultados para siguiente step
          echo "issues_to_create=$ISSUES_TO_CREATE" >> "$GITHUB_OUTPUT"
          
          if [ -n "$ISSUES_TO_CREATE" ]; then
            echo "🎯 ACCIÓN REQUERIDA: Se crearán issues de rotación"
            echo "tokens_needing_rotation<<EOF" >> "$GITHUB_OUTPUT"
            echo "$ISSUES_TO_CREATE" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "✅ TODOS LOS TOKENS ESTÁN AL DÍA"
          fi

      - name: Create rotation issues
        if: steps.check.outputs.issues_to_create != ''
        run: |
          echo "📝 Creando issues de rotación..."
          
          for token_info in ${{ steps.check.outputs.issues_to_create }}; do
            token_name="${token_info%%:*}"
            days_until="${token_info##*:}"
            
            echo "🔄 Procesando: $token_name ($days_until días)"
            
            # Usar script de creación de issues
            if [ -f "tools/ci/open_rotation_issue.sh" ]; then
              ./tools/ci/open_rotation_issue.sh "$token_name" "$days_until" || echo "⚠️ Error creando issue para $token_name"
            else
              echo "❌ Script open_rotation_issue.sh no encontrado"
            fi
          done

      - name: Create workflow summary
        if: always()
        run: |
          echo "## 🔄 Token Rotation Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
          echo "**Threshold:** ${{ github.event.inputs.days_threshold || '30' }} days" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.check.outputs.issues_to_create }}" ]; then
            echo "### 🚨 Tokens Requiring Rotation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            for token_info in ${{ steps.check.outputs.issues_to_create }}; do
              token_name="${token_info%%:*}"
              days_until="${token_info##*:}"
              
              if [ "$days_until" -le 0 ]; then
                urgency="🔴 OVERDUE"
              elif [ "$days_until" -le 7 ]; then
                urgency="🟠 URGENT"
              else
                urgency="🟡 SOON"
              fi
              
              echo "- **$token_name:** $urgency ($days_until days)" >> $GITHUB_STEP_SUMMARY
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Review rotation issues created above" >> $GITHUB_STEP_SUMMARY
            echo "- Follow rotation checklist in each issue" >> $GITHUB_STEP_SUMMARY
            echo "- Update \`security/credentials/cloudflare_tokens.json\` after rotation" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ All Tokens Up to Date" >> $GITHUB_STEP_SUMMARY
            echo "No tokens require rotation within the next ${{ github.event.inputs.days_threshold || '30' }} days." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Next scheduled check: First Monday of next month*" >> $GITHUB_STEP_SUMMARY