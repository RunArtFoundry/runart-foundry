name: Deploy Preview (Cloudflare)

on:
  pull_request:
    branches:
      - develop
      - main
      - deploy/**
  push:
    branches:
      - ci/run-preview-now
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    name: Build & Deploy Preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      statuses: write
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CF_PROJECT_NAME: runart-foundry
      RUNART_ENV: preview
    steps:
      - name: Validate secrets
        run: |
          missing=()
          for name in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID; do
            if [ -z "${!name}" ]; then missing+=("$name"); fi
          done
          if [ -z "${CF_PROJECT_NAME}" ]; then missing+=("CF_PROJECT_NAME"); fi
          if [ ${#missing[@]} -gt 0 ]; then
            echo "ERROR: faltan secrets: ${missing[*]}" >&2
            exit 1
          fi
      - name: Echo project name (debug)
        run: |
          echo "CF_PROJECT_NAME=${CF_PROJECT_NAME}" | sed 's/=.*/=<hidden>/'
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        working-directory: apps/briefing
        run: npm ci
      - name: Build site
        working-directory: apps/briefing
        run: npm run build
      - name: Smoke tests (unit imports)
        working-directory: apps/briefing
        run: npm run test:unit:smoke
      - name: Deploy preview branch
        id: deploy-preview
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ env.CF_PROJECT_NAME }}
          directory: ./apps/briefing/site
          branch: ${{ github.head_ref }}
          wranglerVersion: '3'
      - name: Debug PREVIEW_BASE_URL (pre)
        run: |
          echo "PREVIEW_BASE_URL(pre)=${PREVIEW_BASE_URL:-<empty>}"
      - name: Extract preview URL (API fallback)
        id: extract-preview-url
        env:
          CF_API_URL: https://api.cloudflare.com/client/v4
        run: |
          set -eo pipefail
          # 1) Determinar rama efectiva
          BRANCH="${{ github.head_ref }}"
          if [ -z "$BRANCH" ]; then BRANCH="${{ github.ref_name }}"; fi
          if [ -z "$BRANCH" ]; then BRANCH="${TARGET_BRANCH:-ci/run-preview-now}"; fi
          echo "Branch efectivo: $BRANCH"

          # 2) Intento directo con output del action
          DIRECT_URL="${{ steps.deploy-preview.outputs.preview_url }}"
          if [ -n "$DIRECT_URL" ]; then
            echo "Se recibió preview_url directo del action: $DIRECT_URL"
            URL="$DIRECT_URL"
          fi

          # 3) Llamada API de Cloudflare si no hay URL directa
          if [ -z "$URL" ]; then
            echo "Consultando API Cloudflare Pages…"
            PROJ="${CF_PROJECT_NAME}"
            ACC="${CLOUDFLARE_ACCOUNT_ID}"
            API="${CF_API_URL}/accounts/${ACC}/pages/projects/${PROJ}/deployments?branch=${BRANCH}&per_page=1"
            echo "GET $API"
            # Nota: no exponer token en logs
            RESP=$(curl -sS -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" -H "Content-Type: application/json" "$API" || true)
            echo "Respuesta API: $(echo "$RESP" | jq -r '.success as $s | "success=" + ($s|tostring) + ", count=" + ((.result|length)//0|tostring))' || echo '<sin jq>')"
            URL=$(echo "$RESP" | jq -r '.result[0].url // empty') || true
            if [ -z "$URL" ]; then
              DEPLOY_ID=$(echo "$RESP" | jq -r '.result[0].id // empty') || true
              if [ -n "$DEPLOY_ID" ] && [ -n "$PROJ" ]; then
                URL="https://${DEPLOY_ID}.${PROJ}.pages.dev"
                echo "Construida URL por id: $URL"
              fi
            fi
          fi

          # 4) Regex fallback en logs del paso anterior (si el action imprimió URL)
          if [ -z "$URL" ]; then
            echo "Intentando regex fallback en logs del deploy…"
            # Buscar líneas típicas de wrangler
            LOGFILE="${GITHUB_WORKSPACE}/.tmp_deploy_log.txt"
            : > "$LOGFILE"
            echo "(no disponible: logs del paso previo no se exponen en filesystem)" > "$LOGFILE"
            CANDIDATE=$(grep -Eo 'https://[a-z0-9]+\.${CF_PROJECT_NAME}\.pages\.dev' "$LOGFILE" | head -n1 || true)
            if [ -n "$CANDIDATE" ]; then URL="$CANDIDATE"; fi
          fi

          # 5) Validación y exportes
          if [ -z "$URL" ]; then
            echo "::error::No se pudo resolver preview_url. Parámetros: accountId=${CLOUDFLARE_ACCOUNT_ID}, projectName=${CF_PROJECT_NAME}, branch=${BRANCH}"
            echo "Resumen API (truncado):"; echo "$RESP" | head -c 1000 || true
            exit 1
          fi
          if echo "$URL" | grep -qiE '^https?://preview[.]'; then
            echo "::warning::URL 'preview.*' detectada; aceptando provisionalmente"
          fi
          echo "PREVIEW_BASE_URL=$URL" >> "$GITHUB_ENV"
          ts="$(date -u +%Y%m%dT%H%M%SZ)"
          echo "SMOKES_TS=$ts" >> "$GITHUB_ENV"
          echo "ts=$ts" >> "$GITHUB_OUTPUT"
          echo "preview_url=$URL" >> "$GITHUB_OUTPUT"
          echo "Preview base URL: $URL"
          {
            echo "### Preview URL"
            echo "- Branch: $BRANCH"
            echo "- Project: ${CF_PROJECT_NAME}"
            echo "- URL: $URL"
          } >> "$GITHUB_STEP_SUMMARY"
        shell: bash
      - name: Debug PREVIEW_BASE_URL (post)
        run: |
          echo "PREVIEW_BASE_URL(post)=${PREVIEW_BASE_URL}"
      - name: Network diagnostics
        run: |
          echo "nameservers in runner:"
          cat /etc/resolv.conf || true
          echo "DNS test example.com (getent + 1.1.1.1):"
          getent hosts example.com || true
          dig +short example.com @1.1.1.1 || true
          echo "DNS test cloudflare.com (getent + 1.1.1.1):"
          getent hosts cloudflare.com || true
          dig +short cloudflare.com @1.1.1.1 || true
          echo "DNS test preview host (getent + 1.1.1.1):"
          HOST=$(echo "${PREVIEW_BASE_URL:-https://invalid}" | sed 's#https\?://##' | cut -d/ -f1)
          echo "HOST=$HOST"
          getent hosts "$HOST" || true
          dig +short "$HOST" @1.1.1.1 || true
      - name: Compute auth secret availability
        id: auth-flags
        run: |
          if [ -n "${{ secrets.ACCESS_CLIENT_ID }}" ] && [ -n "${{ secrets.ACCESS_CLIENT_SECRET }}" ]; then
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          else
            echo "enabled=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Precheck preview DNS/HTTP
        run: |
          set -e
          echo "Preview: $PREVIEW_BASE_URL"
          HOST=$(echo "$PREVIEW_BASE_URL" | sed 's#https\?://##' | cut -d/ -f1)
          echo "Host: $HOST"

          resolve() {
            getent hosts "$HOST" >/dev/null && return 0
            dig +short "$HOST" @1.1.1.1 | grep -qE '^[0-9.]+$' && return 0
            return 1
          }

          tries=0; max=6
          until resolve; do
            tries=$((tries+1))
            echo "DNS intento $tries/$max…"
            sleep $((tries*2))
            [ $tries -ge $max ] && { echo "DNS no resuelve: $HOST"; exit 1; }
          done
          echo "DNS OK"

          tries=0; max=3
          until curl -sI --max-time 10 "$PREVIEW_BASE_URL" >/dev/null; do
            tries=$((tries+1))
            echo "HTTP intento $tries/$max…"
            sleep $((tries*2))
            [ $tries -ge $max ] && { echo "HTTP no responde: $PREVIEW_BASE_URL"; exit 1; }
          done
          echo "HTTP OK"
        shell: bash
      - name: Public smoke (Access 30x expected)
        run: |
          set -eo pipefail
          TS="${SMOKES_TS}"
          REPORT="apps/briefing/_reports/smokes_preview_${TS}"
          mkdir -p "$REPORT"
          RESULT="FAIL"
          if PROD_URL="$PREVIEW_BASE_URL" BASE_URL="$PREVIEW_BASE_URL" make -C apps/briefing test-smoke-prod | tee "$REPORT/smokes_stdout_public.txt"; then
            RESULT="PASS"
          else
            # Interpretar WARN como no fatal: si el script reporta WARN y no FAIL, marcar como WARN
            if grep -q "⚠️" "$REPORT/smokes_stdout_public.txt" && ! grep -q "❌" "$REPORT/smokes_stdout_public.txt"; then
              RESULT="WARN"
            fi
          fi
          curl -sSL "$PREVIEW_BASE_URL" -o "${REPORT}/index.html" || true
          {
            echo "# Smokes Preview — ${SMOKES_TS}"
            echo "- Base URL: ${PREVIEW_BASE_URL}"
            echo "- Público (Access 30x): ${RESULT}"
            echo "- Autenticado (Service Token): PENDING"
            echo "- Evidencias: _reports/smokes_preview_${SMOKES_TS}/"
          } > "${REPORT}/SUMMARY.md"
          echo "SMOKES_PREVIEW_PUBLIC=$RESULT" >> "$GITHUB_ENV"
          if [ "$RESULT" = "FAIL" ]; then
            echo "::error::Public smoke (Access 30x) reportó $RESULT. Revisar smokes_stdout_public.txt"
            exit 1
          elif [ "$RESULT" = "WARN" ]; then
            echo "::warning::Public smoke (Access 30x) reportó WARN. Continuando (no fatal)."
          fi
        shell: bash
      - name: Auth smoke (Service Token)
        if: ${{ steps.auth-flags.outputs.enabled == 'true' }}
        env:
          BASE_URL: ${{ env.PREVIEW_BASE_URL }}
          PROD_URL: ${{ env.PREVIEW_BASE_URL }}
          ACCESS_CLIENT_ID: ${{ secrets.ACCESS_CLIENT_ID }}
          ACCESS_CLIENT_SECRET: ${{ secrets.ACCESS_CLIENT_SECRET }}
        run: |
          set -eo pipefail
          TS="${SMOKES_TS}"
          REPORT="apps/briefing/_reports/smokes_preview_${TS}"
          mkdir -p "$REPORT"
          RESULT="FAIL"
          # Pasar explícitamente PROD_URL requerido por Makefile como variable de make, junto con BASE_URL y credenciales
          if BASE_URL="$BASE_URL" ACCESS_CLIENT_ID="$ACCESS_CLIENT_ID" ACCESS_CLIENT_SECRET="$ACCESS_CLIENT_SECRET" make -C apps/briefing test-smoke-wrapper PROD_URL="$PROD_URL" | tee "$REPORT/smokes_stdout_auth.txt"; then
            RESULT="PASS"
          fi
          sed -i "s/Autenticado (Service Token): PENDING/Autenticado (Service Token): ${RESULT}/" "$REPORT/SUMMARY.md"
          echo "SMOKES_PREVIEW_AUTH=$RESULT" >> "$GITHUB_ENV"
          if [ "$RESULT" != "PASS" ]; then
            echo "::error::Authenticated smoke (Service Token) reportó $RESULT"
            exit 1
          fi
        shell: bash
      - name: Auth smoke (SKIPPED — missing secrets)
        if: ${{ steps.auth-flags.outputs.enabled != 'true' }}
        run: |
          echo "Auth smoke SKIPPED: falta ACCESS_CLIENT_ID/ACCESS_CLIENT_SECRET"
          TS="${SMOKES_TS}"
          REPORT="apps/briefing/_reports/smokes_preview_${TS}"
          mkdir -p "$REPORT"
          if [ -f "$REPORT/SUMMARY.md" ]; then
            sed -i "s/Autenticado (Service Token): PENDING/Autenticado (Service Token): SKIPPED/" "$REPORT/SUMMARY.md"
          else
            echo "# Smokes Preview — ${TS}" > "$REPORT/SUMMARY.md"
            echo "- Base URL: ${PREVIEW_BASE_URL}" >> "$REPORT/SUMMARY.md"
            echo "- Público (Access 30x): SKIPPED" >> "$REPORT/SUMMARY.md"
            echo "- Autenticado (Service Token): SKIPPED" >> "$REPORT/SUMMARY.md"
            echo "- Evidencias: _reports/smokes_preview_${TS}/" >> "$REPORT/SUMMARY.md"
          fi
          echo "SMOKES_PREVIEW_AUTH=SKIPPED" >> "$GITHUB_ENV"
        shell: bash
      - name: Update 082 with preview smokes
        run: |
          set -e
          REPORT_DIR="_reports/smokes_preview_${SMOKES_TS}/"
          PUBLIC_STATUS="${SMOKES_PREVIEW_PUBLIC:-UNKNOWN}"
          AUTH_STATUS="${SMOKES_PREVIEW_AUTH:-SKIPPED}"
          FILE="apps/briefing/docs/internal/briefing_system/ci/082_reestructuracion_local.md"
          echo "" >> "$FILE"
          echo "## Smokes Preview — ${SMOKES_TS}" >> "$FILE"
          echo "- Público (Access 30x): ${PUBLIC_STATUS}" >> "$FILE"
          echo "- Autenticado (Service Token): ${AUTH_STATUS}" >> "$FILE"
          echo "- Evidencias: ${REPORT_DIR}" >> "$FILE"
        shell: bash
      - name: Upload preview smoke artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smokes_preview_${{ env.SMOKES_TS }}
          path: apps/briefing/_reports/smokes_preview_${{ env.SMOKES_TS }}/
