name: Run Canary Diagnostics

# ‚ö†Ô∏è Este workflow se ejecuta en ESPA√ëOL

on:
  workflow_dispatch:
    inputs:
      preview_host:
        description: "Pages preview host (https://<...>.pages.dev)"
        required: false
        type: string
      owner: { description: "Correo owner", default: "ppcapiro@gmail.com", required: true, type: string }
      team: { description: "Correo team", default: "officemagerhealthkendall@gmail.com", required: true, type: string }
      client_admin: { description: "Correo client admin", default: "musicmanagercuba@gmail.com", required: true, type: string }
      client: { description: "Correo client", default: "shop.artmarketpremium@gmail.com", required: true, type: string }
      control_legacy: { description: "Correo control legacy", default: "runartfoundry@gmail.com", required: true, type: string }

jobs:
  diag:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      PREVIEW_HOST: ${{ inputs.preview_host }}
      OWNER: ${{ inputs.owner }}
      TEAM: ${{ inputs.team }}
      CLIENT_ADMIN: ${{ inputs.client_admin }}
      CLIENT: ${{ inputs.client }}
      CONTROL_LEGACY: ${{ inputs.control_legacy }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/briefing/package-lock.json

      - name: Install deps
        run: npm ci --prefix apps/briefing

      - name: Resolve preview host dynamically
        id: resolve_host
        shell: bash
        run: |
          set -euo pipefail
          PH="${PREVIEW_HOST}"
          echo "Input PREVIEW_HOST: ${PH:-<empty>}"
          RESOLVED="$PH"
          need_resolve=0

          if [ -z "${RESOLVED}" ]; then
            need_resolve=1
          else
            DOMAIN="$(echo "${RESOLVED}" | sed -E 's#https?://##; s#/$##')"
            if ! getent hosts "$DOMAIN" >/dev/null 2>&1; then
              echo "‚ö†Ô∏è  ${DOMAIN} no resuelve, intentar√© resolver un preview activo‚Ä¶"
              need_resolve=1
            fi
          fi

          if [ "$need_resolve" -eq 1 ]; then
            echo "üîé Buscando proyecto Pages‚Ä¶"
            PROJECT_NAME=""

            if [ -f apps/briefing/wrangler.toml ]; then
              PROJECT_NAME="$(awk -F'=' '/^name[[:space:]]*=/ {gsub(/[[:space:]"]/, "", $2); print $2; exit}' apps/briefing/wrangler.toml || true)"
            fi

            if [ -f apps/briefing/wrangler.toml ]; then
              ACCOUNT_ID="$(awk -F'=' '/^account_id[[:space:]]*=/{gsub(/[[:space:]\"]/, "", $2); print $2; exit}' apps/briefing/wrangler.toml || true)"
            else
              ACCOUNT_ID=""
            fi

            if [ -z "$ACCOUNT_ID" ]; then
              RAW_ACCOUNT="$(grep -R -Eo 'account_id[[:space:]]+[a-f0-9]{32}' apps/briefing/docs 2>/dev/null || true)"
              if [ -n "$RAW_ACCOUNT" ]; then
                ACCOUNT_ID="$(echo "$RAW_ACCOUNT" | head -n1 | awk '{print $2}')"
              fi
            fi

            if [ -z "$ACCOUNT_ID" ]; then
              RAW_ACCOUNT="$(grep -R -Eo 'a2c7fc66f00eab69373e448193ae7201' . 2>/dev/null || true)"
              if [ -n "$RAW_ACCOUNT" ]; then
                ACCOUNT_ID="$(echo "$RAW_ACCOUNT" | head -n1 | awk '{print $1}')"
              fi
            fi
            if [ -z "$ACCOUNT_ID" ]; then
              ACCOUNT_ID="a2c7fc66f00eab69373e448193ae7201"
            fi

            if [ -z "$PROJECT_NAME" ]; then
              set +e
              PROJECT_LIST="$(curl -fsS -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" "https://api.cloudflare.com/client/v4/accounts/${ACCOUNT_ID}/pages/projects?per_page=50")"
              LIST_STATUS=$?
              set -e
              if [ $LIST_STATUS -eq 0 ] && [ -n "$PROJECT_LIST" ]; then
                PROJECT_NAME="$(echo "$PROJECT_LIST" | jq -r '.result | map(.name) | map(select(test("(briefing|runart)"; "i"))) | first // empty' || true)"
                if [ -z "$PROJECT_NAME" ]; then
                  PROJECT_NAME="$(echo "$PROJECT_LIST" | jq -r '.result[0].name // empty' || true)"
                fi
              fi
            fi

            if [ -z "$PROJECT_NAME" ]; then
              PROJECT_NAME="runart-foundry"
            fi

            if [ -z "$PROJECT_NAME" ] || [ -z "$ACCOUNT_ID" ]; then
              echo "‚ùå No pude detectar proyecto Pages o account id" >&2
              exit 1
            fi

            echo "Proyecto detectado: $PROJECT_NAME"
            echo "Account ID: $ACCOUNT_ID"

            set +e
            DEPLOY_JSON="$(curl -fsS -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" "https://api.cloudflare.com/client/v4/accounts/${ACCOUNT_ID}/pages/projects/${PROJECT_NAME}/deployments?per_page=50")"
            CURL_STATUS=$?
            set -e
            if [ $CURL_STATUS -ne 0 ] || [ -z "$DEPLOY_JSON" ]; then
              echo "‚ùå No obtuve deployments para $PROJECT_NAME (API)" >&2
              exit 1
            fi

            RESOLVED="$(echo "$DEPLOY_JSON" | jq -r '.result | map(select(.environment=="preview")) | sort_by(.created_on) | last | .url // empty' || true)"

            if [ -z "$RESOLVED" ]; then
              echo "‚ùå No encontr√© deployment preview activo." >&2
              exit 1
            fi
            echo "PREVIEW_HOST reparado: $RESOLVED"
          fi

          echo "preview_host=${RESOLVED}" >> "$GITHUB_OUTPUT"

      - name: Print context (safe)
        env:
          RESOLVED_HOST: ${{ steps.resolve_host.outputs.preview_host }}
        run: |
          echo "Host: ${RESOLVED_HOST:-${PREVIEW_HOST}}"
          echo "Emails: ${OWNER} | ${TEAM} | ${CLIENT_ADMIN} | ${CLIENT} (control: ${CONTROL_LEGACY})"

      - name: Verify DNS/HTTP preview
        env:
          RESOLVED_HOST: ${{ steps.resolve_host.outputs.preview_host }}
        run: |
          HOST_TO_CHECK="${RESOLVED_HOST:-${PREVIEW_HOST}}"
          DOMAIN="$(echo "${HOST_TO_CHECK}" | sed -E 's#https?://##; s#/$##')"
          echo "Domain: $DOMAIN"
          getent hosts "$DOMAIN" || (echo "DNS no resuelve $DOMAIN" && exit 1)
          curl -fsS "${HOST_TO_CHECK}/health" || true
          curl -I  -sS "${HOST_TO_CHECK}/" | head -n 20 || true

      - name: Read KV (RUNART_ROLES + CANARY whitelist) v√≠a API
        id: kvread
        run: |
          echo "üîç Extrayendo Cloudflare account_id y namespace (documentado en espa√±ol)..."
          ACC_ID=""
          # 1Ô∏è‚É£ Intentar primero desde wrangler.toml
          if [ -f apps/briefing/wrangler.toml ]; then
            ACC_ID=$(grep -E 'account_id' apps/briefing/wrangler.toml | awk -F'=' '{gsub(/[ "\t]/,"",$2);print $2}' | head -n1 || true)
          fi
          # 2Ô∏è‚É£ Si sigue vac√≠o, buscar heur√≠sticamente en documentaci√≥n local
          if [ -z "$ACC_ID" ]; then
            ACC_ID=$(grep -Eo 'account_id [a-f0-9]+' -r apps/briefing/docs || true | head -n1 | awk '{print $2}' || true)
          fi
          # 3Ô∏è‚É£ Fallback: patr√≥n conocido (auditor√≠a)
          if [ -z "$ACC_ID" ]; then
            ACC_ID=$(grep -Eo 'a2c7fc66f00eab69373e448193ae7201' -r . || true | head -n1 | awk '{print $1}' || true)
          fi
          echo "üìÑ account_id detectado: ${ACC_ID:-<no encontrado>}"

          NS_ID=$(grep -Eo '7d80b07de98e4d9b9d5fd85516901ef6' -r . || true | head -n1 | awk '{print $1}' || true)
          echo "üì¶ Namespace preview (heur√≠stico): ${NS_ID:-<no encontrado>}"

          OUT="apps/briefing/_reports/roles_canary_preview"
          mkdir -p "$OUT"

          if [ -n "$ACC_ID" ] && [ -n "$NS_ID" ]; then
            curl -fsS -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/accounts/${ACC_ID}/storage/kv/namespaces/${NS_ID}/values/RUNART_ROLES" \
              -o "${OUT}/kv_RUNART_ROLES.json" || true

            curl -fsS -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/accounts/${ACC_ID}/storage/kv/namespaces/${NS_ID}/values/CANARY_ROLE_RESOLVER_EMAILS" \
              -o "${OUT}/kv_CANARY_ROLE_RESOLVER_EMAILS.json" || true

            echo "kv_roles_path=${OUT}/kv_RUNART_ROLES.json" >> $GITHUB_OUTPUT
            echo "kv_wl_path=${OUT}/kv_CANARY_ROLE_RESOLVER_EMAILS.json" >> $GITHUB_OUTPUT

            echo "‚úÖ KV descargado correctamente (ver archivos en artefactos)."
          else
            echo "‚ö†Ô∏è No se pudieron inferir los IDs. Se continuar√° con las pruebas de smoke."
          fi

      - name: Smokes focalizados (sin export)
        env:
          RESOLVED_HOST: ${{ steps.resolve_host.outputs.preview_host }}
        run: |
          TS=$(date -u +%Y%m%dT%H%M%SZ)
          OUT_DIR="apps/briefing/_reports/roles_canary_preview"
          RUN_DIR="${OUT_DIR}/smokes_${TS}"
          mkdir -p "${RUN_DIR}"
          HOST_TO_USE="${RESOLVED_HOST:-${PREVIEW_HOST}}"
          node apps/briefing/scripts/smoke_canary_emails.mjs "${HOST_TO_USE}" \
            "${OWNER}" "${TEAM}" "${CLIENT_ADMIN}" "${CLIENT}" \
            --control "${CONTROL_LEGACY}" \
            --out "${RUN_DIR}"

      - name: Captura de headers /api/whoami
        env:
          RESOLVED_HOST: ${{ steps.resolve_host.outputs.preview_host }}
        run: |
          OUT_DIR="apps/briefing/_reports/roles_canary_preview"
          RUN_DIR=$(ls -d ${OUT_DIR}/smokes_* | tail -n 1)
          if [ -f apps/briefing/scripts/fetch_whoami_headers.mjs ]; then
            HOST_TO_USE="${RESOLVED_HOST:-${PREVIEW_HOST}}"
            node apps/briefing/scripts/fetch_whoami_headers.mjs "${HOST_TO_USE}" "${OWNER}"          > "${RUN_DIR}/whoami_headers_owner.txt" 2>/dev/null || true
            node apps/briefing/scripts/fetch_whoami_headers.mjs "${HOST_TO_USE}" "${TEAM}"           > "${RUN_DIR}/whoami_headers_team.txt" 2>/dev/null || true
            node apps/briefing/scripts/fetch_whoami_headers.mjs "${HOST_TO_USE}" "${CLIENT_ADMIN}"   > "${RUN_DIR}/whoami_headers_client_admin.txt" 2>/dev/null || true
            node apps/briefing/scripts/fetch_whoami_headers.mjs "${HOST_TO_USE}" "${CLIENT}"         > "${RUN_DIR}/whoami_headers_client.txt" 2>/dev/null || true
            node apps/briefing/scripts/fetch_whoami_headers.mjs "${HOST_TO_USE}" "${CONTROL_LEGACY}" > "${RUN_DIR}/whoami_headers_control_legacy.txt" 2>/dev/null || true
          fi

      - name: Comparativa esperado vs observado (tabla)
        id: compare
        env:
          RESOLVED_HOST: ${{ steps.resolve_host.outputs.preview_host }}
        run: |
          OUT_DIR="apps/briefing/_reports/roles_canary_preview"
          RUN_DIR=$(ls -d ${OUT_DIR}/smokes_* | tail -n 1)
          TS=$(echo "${RUN_DIR}" | sed -E 's#.*/smokes_([0-9TZ]+).*#\1#')
          RESUMEN="${OUT_DIR}/RESUMEN_${TS}.md"

          geth(){ f="$1"; k="$2"; grep -i "$k" "$f" 2>/dev/null | head -n1 | awk -F': ' '{print $2}' | tr -d '\r' | tr '[:upper:]' '[:lower:]'; }

          declare -A EXPECT_ROLE=(
            ["owner"]="owner"
            ["client_admin"]="client_admin"
            ["team"]="team"
            ["client"]="client"
            ["control_legacy"]="(legacy)"
          )

          printf "# Pipeline Canario ‚Äî Diagn√≥stico (%s UTC)\n\n" "$TS" > "$RESUMEN"
          HOST_PRINT="${RESOLVED_HOST:-${PREVIEW_HOST}}"
          printf "Host: %s\n\n" "$HOST_PRINT" >> "$RESUMEN"

          echo "## KV detectado" >> "$RESUMEN"
          if [ -f "${OUT_DIR}/kv_RUNART_ROLES.json" ]; then
            echo "- RUNART_ROLES: presente ‚úÖ" >> "$RESUMEN"
          else
            echo "- RUNART_ROLES: no disponible ‚ö†Ô∏è" >> "$RESUMEN"
          fi
          if [ -f "${OUT_DIR}/kv_CANARY_ROLE_RESOLVER_EMAILS.json" ]; then
            echo "- CANARY_ROLE_RESOLVER_EMAILS: presente ‚úÖ" >> "$RESUMEN"
          else
            echo "- CANARY_ROLE_RESOLVER_EMAILS: no disponible ‚ö†Ô∏è" >> "$RESUMEN"
          fi
          echo "" >> "$RESUMEN"

          echo "## Comparativa" >> "$RESUMEN"
          echo "| Caso | Esperado | X-RunArt-Canary | X-RunArt-Resolver | Archivo |" >> "$RESUMEN"
          echo "|------|----------|------------------|-------------------|---------|" >> "$RESUMEN"
          for case in owner client_admin team client control_legacy; do
            FILE="${RUN_DIR}/whoami_headers_${case}.txt"
            CANARY=$(geth "$FILE" 'X-RunArt-Canary')
            RESOLV=$(geth "$FILE" 'X-RunArt-Resolver')
            echo "| ${case} | ${EXPECT_ROLE[$case]} | ${CANARY:-?} | ${RESOLV:-?} | $(basename "$FILE" 2>/dev/null || echo '-') |" >> "$RESUMEN"
          done
          echo "" >> "$RESUMEN"

          echo "## Veredicto (marcar)" >> "$RESUMEN"
          echo "- [ ] **GO** ‚Üí Activar canario global en preview (ROLE_RESOLVER_SOURCE=\"utils\")." >> "$RESUMEN"
          echo "- [ ] **NO-GO** ‚Üí Mantener legacy; abrir fix con evidencias." >> "$RESUMEN"
          echo "" >> "$RESUMEN"

          echo "resumen_path=${RESUMEN}" >> $GITHUB_OUTPUT

      - name: Subir artefactos
        uses: actions/upload-artifact@v4
        with:
          name: roles_canary_diag_${{ github.run_id }}
          path: |
            apps/briefing/_reports/roles_canary_preview/

      - name: Job Summary
        env:
          RESOLVED_HOST: ${{ steps.resolve_host.outputs.preview_host }}
        run: |
          echo "## Canary Diagnostics ‚Äî Resultado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Host**: ${RESOLVED_HOST:-${PREVIEW_HOST}}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Artefactos: roles_canary_diag_${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Revisa el RESUMEN en el artifact para decidir GO/NO-GO." >> $GITHUB_STEP_SUMMARY
