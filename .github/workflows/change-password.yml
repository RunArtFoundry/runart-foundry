name: Change User Password

on:
  workflow_dispatch:
    inputs:
      username:
        description: "WordPress username"
        required: true
        type: string
      new_password:
        description: "New password (leave empty to generate random)"
        required: false
        type: string
      generate_artifact:
        description: "Generate artifact with credentials"
        required: false
        default: "true"
        type: string

permissions:
  contents: read
  actions: read

jobs:
  change-password:
    name: Change Password
    runs-on: ubuntu-latest
    env:
      BASE_URL: ${{ vars.WP_BASE_URL }}
      WP_USER: ${{ secrets.WP_USER }}
      WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
      OUT_DIR: out
    steps:
      - name: Preparar entorno
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR"
          # Generar password aleatorio si no se proveyó
          if [ -z "${{ inputs.new_password }}" ]; then
            NEW_PASS=$(openssl rand -base64 32 | tr -dc 'A-Za-z0-9' | head -c 24)
            echo "PASSWORD_PROVIDED=false" >> $GITHUB_ENV
          else
            NEW_PASS="${{ inputs.new_password }}"
            echo "PASSWORD_PROVIDED=true" >> $GITHUB_ENV
          fi
          echo "NEW_PASS=$NEW_PASS" >> $GITHUB_ENV
          echo "::add-mask::$NEW_PASS"
          # Preparar auth header
          AUTH=$(printf "%s:%s" "$WP_USER" "$WP_APP_PASSWORD" | base64)
          echo "AUTH=$AUTH" >> $GITHUB_ENV
          echo "::add-mask::$WP_APP_PASSWORD"
          echo "::add-mask::$AUTH"

      - name: Buscar ID de usuario
        id: find_user
        run: |
          set -euo pipefail
          USERNAME="${{ inputs.username }}"
          AUTH="$AUTH"
          BASE="$BASE_URL"
          TMP=$(mktemp)
          CODE=$(curl -sS -o "$TMP" -w "%{http_code}" -H "Authorization: Basic $AUTH" "$BASE/wp-json/wp/v2/users?search=$USERNAME" || true)
          if [ "$CODE" != "200" ]; then
            echo "Error buscando usuario (HTTP $CODE)" >&2
            cat "$TMP" >&2
            exit 1
          fi
          USER_ID=$(jq -r '[.[] | select(.slug=="'$USERNAME'") ] | .[0].id // ""' "$TMP" 2>/dev/null || echo "")
          rm -f "$TMP"
          if [ -z "$USER_ID" ]; then
            echo "Usuario no encontrado: $USERNAME" >&2
            exit 1
          fi
          echo "user_id=$USER_ID" >> $GITHUB_OUTPUT
          echo "Usuario encontrado: ID=$USER_ID"

      - name: Actualizar password
        run: |
          set -euo pipefail
          USER_ID="${{ steps.find_user.outputs.user_id }}"
          AUTH="$AUTH"
          BASE="$BASE_URL"
          NEW_PASS="$NEW_PASS"
          TMP=$(mktemp)
          CODE=$(curl -sS -o "$TMP" -w "%{http_code}" -X PUT \
            -H "Authorization: Basic $AUTH" \
            -H "Content-Type: application/json" \
            -d "{\"password\":\"$NEW_PASS\"}" \
            "$BASE/wp-json/wp/v2/users/$USER_ID" || true)
          if [ "$CODE" != "200" ]; then
            echo "Error actualizando password (HTTP $CODE)" >&2
            cat "$TMP" >&2
            exit 1
          fi
          rm -f "$TMP"
          echo "✅ Password actualizado exitosamente"

      - name: Generar artifact de credenciales
        if: ${{ inputs.generate_artifact == 'true' }}
        run: |
          set -euo pipefail
          USERNAME="${{ inputs.username }}"
          NEW_PASS="$NEW_PASS"
          PASSWORD_PROVIDED="$PASSWORD_PROVIDED"
          mkdir -p "$OUT_DIR"
          {
            echo "username=$USERNAME"
            echo "password=$NEW_PASS"
            echo "password_provided=$PASSWORD_PROVIDED"
            echo "url=${BASE_URL}/wp-admin"
            echo "changed_at=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          } > "$OUT_DIR/credentials.txt"

      - name: Subir artifact
        if: ${{ inputs.generate_artifact == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: changed-credentials
          path: ${{ env.OUT_DIR }}/credentials.txt
