#!/bin/bash
# Script para crear issue autom√°tico de rotaci√≥n de tokens
# Uso: ./open_rotation_issue.sh [token_name] [days_until_expiry]

set -euo pipefail

TOKEN_NAME="${1:-CLOUDFLARE_API_TOKEN}"
DAYS_UNTIL="${2:-30}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TOKENS_CONFIG="$SCRIPT_DIR/../../security/credentials/cloudflare_tokens.json"

echo "üîÑ CREADOR DE ISSUES DE ROTACI√ìN"
echo "================================"
echo "Token: $TOKEN_NAME"
echo "D√≠as hasta expiraci√≥n: $DAYS_UNTIL"
echo ""

# Verificar dependencias
if ! command -v gh &> /dev/null; then
    echo "‚ùå GitHub CLI no encontrado"
    echo "Instalar: https://cli.github.com/"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "‚ùå jq no encontrado"
    echo "Instalar: sudo apt-get install jq"
    exit 1
fi

# Verificar autenticaci√≥n GitHub CLI
if ! gh auth status &>/dev/null; then
    echo "‚ùå No autenticado en GitHub CLI"  
    echo "Ejecutar: gh auth login"
    exit 1
fi

# Leer configuraci√≥n de token
if [ ! -f "$TOKENS_CONFIG" ]; then
    echo "‚ùå Archivo de configuraci√≥n no encontrado: $TOKENS_CONFIG"
    exit 1
fi

TOKEN_INFO=$(jq -r ".tokens[\"$TOKEN_NAME\"] // empty" "$TOKENS_CONFIG")
if [ -z "$TOKEN_INFO" ]; then
    echo "‚ùå Token $TOKEN_NAME no encontrado en configuraci√≥n"
    exit 1
fi

# Extraer informaci√≥n del token
LAST_ROTATED=$(echo "$TOKEN_INFO" | jq -r '.last_rotated // "unknown"')
ROTATION_DAYS=$(echo "$TOKEN_INFO" | jq -r '.rotation_days // 180')
NEXT_ROTATION=$(echo "$TOKEN_INFO" | jq -r '.next_rotation // "unknown"')
STATUS=$(echo "$TOKEN_INFO" | jq -r '.status // "unknown"')

echo "üìä Informaci√≥n del token:"
echo "  ‚Ä¢ √öltima rotaci√≥n: $LAST_ROTATED"
echo "  ‚Ä¢ D√≠as entre rotaciones: $ROTATION_DAYS" 
echo "  ‚Ä¢ Pr√≥xima rotaci√≥n: $NEXT_ROTATION"
echo "  ‚Ä¢ Estado: $STATUS"
echo ""

# Generar contenido del issue
ISSUE_TITLE="üîÑ Rotaci√≥n de Token: $TOKEN_NAME (${DAYS_UNTIL}d restantes)"
ISSUE_BODY="## üîÑ Rotaci√≥n de Token Programada

**Token:** \`$TOKEN_NAME\`  
**D√≠as restantes:** $DAYS_UNTIL  
**Pr√≥xima rotaci√≥n:** $NEXT_ROTATION  
**Estado actual:** $STATUS

### üìã Checklist de Rotaci√≥n

#### Preparaci√≥n
- [ ] Verificar que token actual sigue funcionando
- [ ] Revisar workflows que usan este token
- [ ] Confirmar scopes requeridos actualizados

#### Rotaci√≥n
- [ ] Ir a [Cloudflare Dashboard > API Tokens](https://dash.cloudflare.com/profile/api-tokens)
- [ ] Crear nuevo token con scopes m√≠nimos:
  - \`com.cloudflare.api.account.zone:read\`
  - \`com.cloudflare.edge.worker.script:read\`
  - \`com.cloudflare.edge.worker.kv:edit\`
  - \`com.cloudflare.api.account.zone.page:edit\`
- [ ] Actualizar GitHub secret \`$TOKEN_NAME\`
- [ ] Ejecutar workflow de verificaci√≥n: \`gh workflow run ci_cloudflare_tokens_verify.yml\`

#### Validaci√≥n Post-Rotaci√≥n
- [ ] Confirmar que verificaci√≥n de scopes pasa
- [ ] Ejecutar deploy de prueba en preview
- [ ] Ejecutar deploy de prueba en producci√≥n
- [ ] Actualizar \`last_rotated\` en \`security/credentials/cloudflare_tokens.json\`

#### Limpieza
- [ ] Revocar token anterior en Cloudflare Dashboard
- [ ] Documentar rotaci√≥n en commit message
- [ ] Cerrar este issue

### ‚ö†Ô∏è Scopes Requeridos

| Scope | Justificaci√≥n |
|-------|---------------|
| \`zone:read\` | Verificaci√≥n de dominios Pages |
| \`worker.script:read\` | Validaci√≥n de Workers |
| \`worker.kv:edit\` | Gesti√≥n de KV namespaces |
| \`zone.page:edit\` | Deploy y gesti√≥n de Pages |

### üö® En Caso de Problemas

1. **Token no funciona:** Verificar scopes y recursos en Dashboard
2. **Deploy falla:** Usar token legacy temporalmente mientras se corrige
3. **Scopes insuficientes:** A√±adir permisos m√≠nimos necesarios

### üìÅ Archivos Relacionados

- \`security/credentials/cloudflare_tokens.json\` - Configuraci√≥n y pol√≠tica
- \`tools/ci/check_cf_scopes.sh\` - Script de verificaci√≥n
- \`.github/workflows/ci_cloudflare_tokens_verify.yml\` - Workflow de verificaci√≥n

---
**Creado autom√°ticamente:** $(date -u +%Y-%m-%dT%H:%M:%SZ)  
**Configuraci√≥n:** $TOKENS_CONFIG"

# Verificar si ya existe un issue similar abierto
echo "üîç Verificando issues existentes..."

EXISTING_ISSUES=$(gh issue list --label "rotation,tokens,cloudflare" --state open --json number,title --jq ".[] | select(.title | contains(\"$TOKEN_NAME\")) | .number")

if [ -n "$EXISTING_ISSUES" ]; then
    echo "‚ö†Ô∏è  Issues de rotaci√≥n existentes encontrados:"
    echo "$EXISTING_ISSUES" | while read -r issue_num; do
        echo "  ‚Ä¢ Issue #$issue_num"
    done
    echo ""
    echo "¬øCrear nuevo issue de todas formas? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo "‚ùå Cancelado por el usuario"
        exit 0
    fi
fi

# Crear el issue
echo "üìù Creando issue de rotaci√≥n..."

ISSUE_URL=$(gh issue create \
    --title "$ISSUE_TITLE" \
    --body "$ISSUE_BODY" \
    --label "rotation,tokens,cloudflare,maintenance" \
    --assignee "@me")

if [ $? -eq 0 ]; then
    echo "‚úÖ Issue creado exitosamente: $ISSUE_URL"
    echo ""
    echo "üìã Pr√≥ximos pasos:"
    echo "1. Seguir checklist en el issue"
    echo "2. Ejecutar rotaci√≥n antes de $NEXT_ROTATION"
    echo "3. Actualizar cloudflare_tokens.json tras rotaci√≥n"
else
    echo "‚ùå Error creando issue"
    exit 1
fi