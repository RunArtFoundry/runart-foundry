#!/bin/bash
# üß© COPAYLO ‚Äî REPARACI√ìN AUTOM√ÅTICA PRODUCCI√ìN/STAGING ¬∑ RUN ART FOUNDRY
# Objetivo: revertir mezcla entre producci√≥n y staging, restaurar sitio original del cliente y aislar entornos.
# Pol√≠tica: NO eliminar archivos, NO borrar bases de datos. Solo corrige rutas, URLs y enlaces cruzados.

set -euo pipefail

DATE=$(date +%Y%m%d_%H%M%S)
REPORT_DIR="_reports/repair_auto"
mkdir -p "$REPORT_DIR"

echo "=== üîç INICIANDO REPARACI√ìN AUTOM√ÅTICA ==="

###################################################################################################
# 0Ô∏è‚É£ VALIDACIONES DE SEGURIDAD PREVIAS
###################################################################################################

echo "‚Üí Validando estructura de archivos y permisos..."

PROD_WP="/htdocs/wp-config.php"
STAGING_WP="/htdocs/staging/wp-config.php"

# Verificar existencia de archivos cr√≠ticos
if [ ! -f "$PROD_WP" ]; then
    echo "‚ö†Ô∏è ADVERTENCIA: wp-config.php de producci√≥n no encontrado en $PROD_WP"
    echo "   Esto podr√≠a indicar estructura de hosting diferente o ejecuci√≥n desde entorno local"
    echo "   Continuando con validaciones..."
    PROD_EXISTS=false
else
    PROD_EXISTS=true
fi

if [ ! -f "$STAGING_WP" ]; then
    echo "‚ö†Ô∏è ADVERTENCIA: wp-config.php de staging no encontrado en $STAGING_WP"
    echo "   Esto podr√≠a indicar estructura de hosting diferente o ejecuci√≥n desde entorno local"
    echo "   Continuando con validaciones..."
    STAG_EXISTS=false
else
    STAG_EXISTS=true
fi

# Si ning√∫n archivo existe, probablemente estamos en entorno local/desarrollo
if [ "$PROD_EXISTS" = false ] && [ "$STAG_EXISTS" = false ]; then
    echo "üõ°Ô∏è MODO SEGURO: No se detectaron archivos WordPress en rutas esperadas"
    echo "   El script continuar√° en modo simulaci√≥n/reporte sin modificar archivos"
    SAFE_MODE=true
else
    SAFE_MODE=false
fi

###################################################################################################
# 1Ô∏è‚É£ DETECTAR ENTORNOS
###################################################################################################

if [ "$PROD_EXISTS" = true ]; then
    PROD_DB=$(grep "DB_NAME" "$PROD_WP" | cut -d"'" -f4 2>/dev/null || echo "NO_DETECTADO")
else
    PROD_DB="ARCHIVO_NO_ENCONTRADO"
fi

if [ "$STAG_EXISTS" = true ]; then
    STAG_DB=$(grep "DB_NAME" "$STAGING_WP" | cut -d"'" -f4 2>/dev/null || echo "NO_DETECTADO")
else
    STAG_DB="ARCHIVO_NO_ENCONTRADO"
fi

echo "üß± BD producci√≥n: $PROD_DB"
echo "üß± BD staging: $STAG_DB"

# VALIDACI√ìN CR√çTICA: Verificar que las BD son diferentes
if [ "$PROD_DB" = "$STAG_DB" ] && [ "$PROD_DB" != "ARCHIVO_NO_ENCONTRADO" ] && [ "$PROD_DB" != "NO_DETECTADO" ]; then
    echo "üö® PELIGRO CR√çTICO: Ambos entornos apuntan a la misma base de datos: $PROD_DB"
    echo "   ABORTANDO para evitar corrupci√≥n de datos"
    exit 1
fi

# Crear respaldos de archivos de configuraci√≥n
if [ "$SAFE_MODE" = false ]; then
    echo "‚Üí Creando respaldos de seguridad..."
    [ "$PROD_EXISTS" = true ] && cp "$PROD_WP" "$REPORT_DIR/wp-config-prod-backup-$DATE.php"
    [ "$STAG_EXISTS" = true ] && cp "$STAGING_WP" "$REPORT_DIR/wp-config-staging-backup-$DATE.php"
    echo "‚úÖ Respaldos creados en $REPORT_DIR/"
fi

###################################################################################################
# 2Ô∏è‚É£ REVISAR Y REPARAR PRODUCCI√ìN (runartfoundry.com)
###################################################################################################
echo "=== üîß REPARANDO PRODUCCI√ìN ==="

if [ "$PROD_EXISTS" = true ] && [ "$SAFE_MODE" = false ]; then
    echo "‚Üí Corrigiendo URLs en wp-config.php de producci√≥n..."
    
    # Asegurar URLs correctas en wp-config.php
    sed -i '/WP_HOME/d' "$PROD_WP" || true
    sed -i '/WP_SITEURL/d' "$PROD_WP" || true
    echo "define('WP_HOME','https://runartfoundry.com');" >> "$PROD_WP"
    echo "define('WP_SITEURL','https://runartfoundry.com');" >> "$PROD_WP"
    echo "‚úÖ Constantes WP_HOME/WP_SITEURL configuradas para producci√≥n"
    
    # Verificar .htaccess (no redirecciones a staging)
    HTACCESS="/htdocs/.htaccess"
    if [ -f "$HTACCESS" ]; then
        if grep -q "staging.runartfoundry.com" "$HTACCESS"; then
            echo "‚öôÔ∏è Corrigiendo .htaccess de producci√≥n (eliminando redirecciones a staging)..."
            cp "$HTACCESS" "$REPORT_DIR/htaccess-backup-$DATE"
            sed -i '/staging.runartfoundry.com/d' "$HTACCESS"
            echo "‚úÖ .htaccess limpio."
        else
            echo "‚úÖ .htaccess de producci√≥n ya est√° correcto"
        fi
    else
        echo "‚ÑπÔ∏è Archivo .htaccess no encontrado en producci√≥n"
    fi
    
    # Limpiar cach√© producci√≥n
    if [ -d "/htdocs/wp-content/cache" ]; then
        rm -rf /htdocs/wp-content/cache/* 2>/dev/null || true
        echo "‚úÖ Cach√© local de producci√≥n limpiada."
    else
        echo "‚ÑπÔ∏è Directorio de cach√© de producci√≥n no encontrado"
    fi
else
    echo "‚ö†Ô∏è Saltando reparaci√≥n de producci√≥n (modo seguro o archivo no encontrado)"
fi

# Corregir URLs en base de datos de producci√≥n
if [ "$PROD_DB" != "ARCHIVO_NO_ENCONTRADO" ] && [ "$PROD_DB" != "NO_DETECTADO" ] && [ -n "${DB_USER:-}" ]; then
    echo "‚Üí Verificando URLs en base de datos de producci√≥n..."
    QUERY="SELECT option_name, option_value FROM wp_options WHERE option_name IN ('siteurl','home');"
    
    if mysql -u"$DB_USER" -p"${DB_PASSWORD:-}" -h"${DB_HOST:-localhost}" -D"$PROD_DB" -e "$QUERY" > "$REPORT_DIR/prod_url_before.txt" 2>/dev/null; then
        if grep -q "staging.runartfoundry.com" "$REPORT_DIR/prod_url_before.txt"; then
            echo "‚öôÔ∏è Corrigiendo URLs de producci√≥n en base de datos..."
            mysql -u"$DB_USER" -p"${DB_PASSWORD:-}" -h"${DB_HOST:-localhost}" -D"$PROD_DB" -e \
            "UPDATE wp_options SET option_value='https://runartfoundry.com' WHERE option_name IN ('siteurl','home');" 2>/dev/null
            echo "‚úÖ URLs de producci√≥n restauradas."
        else
            echo "‚úÖ URLs de producci√≥n en BD ya correctas."
        fi
    else
        echo "‚ö†Ô∏è No se pudo acceder a la base de datos de producci√≥n"
        echo "Error de conexi√≥n a BD producci√≥n" > "$REPORT_DIR/prod_url_before.txt"
    fi
else
    echo "‚ö†Ô∏è Saltando verificaci√≥n de BD de producci√≥n (credenciales no disponibles o BD no detectada)"
    echo "BD no verificada" > "$REPORT_DIR/prod_url_before.txt"
fi

###################################################################################################
# 3Ô∏è‚É£ AISLAR Y REPARAR STAGING (staging.runartfoundry.com)
###################################################################################################
echo "=== üîß REPARANDO STAGING ==="

if [ "$STAG_EXISTS" = true ] && [ "$SAFE_MODE" = false ]; then
    echo "‚Üí Corrigiendo URLs en wp-config.php de staging..."
    
    # Fijar URLs de staging en wp-config
    sed -i '/WP_HOME/d' "$STAGING_WP" || true
    sed -i '/WP_SITEURL/d' "$STAGING_WP" || true
    echo "define('WP_HOME','https://staging.runartfoundry.com');" >> "$STAGING_WP"
    echo "define('WP_SITEURL','https://staging.runartfoundry.com');" >> "$STAGING_WP"
    echo "‚úÖ Constantes WP_HOME/WP_SITEURL configuradas para staging"
    
    # Limpiar cach√© staging
    if [ -d "/htdocs/staging/wp-content/cache" ]; then
        rm -rf /htdocs/staging/wp-content/cache/* 2>/dev/null || true
        echo "‚úÖ Cach√© local de staging limpiada."
    else
        echo "‚ÑπÔ∏è Directorio de cach√© de staging no encontrado"
    fi
else
    echo "‚ö†Ô∏è Saltando reparaci√≥n de staging (modo seguro o archivo no encontrado)"
fi

# Corregir URLs en base de datos de staging
if [ "$STAG_DB" != "ARCHIVO_NO_ENCONTRADO" ] && [ "$STAG_DB" != "NO_DETECTADO" ] && [ -n "${DB_USER:-}" ]; then
    echo "‚Üí Verificando URLs en base de datos de staging..."
    QUERY="SELECT option_name, option_value FROM wp_options WHERE option_name IN ('siteurl','home');"
    
    if mysql -u"$DB_USER" -p"${DB_PASSWORD:-}" -h"${DB_HOST:-localhost}" -D"$STAG_DB" -e "$QUERY" > "$REPORT_DIR/stag_url_before.txt" 2>/dev/null; then
        if grep -q "runartfoundry.com" "$REPORT_DIR/stag_url_before.txt" && ! grep -q "staging.runartfoundry.com" "$REPORT_DIR/stag_url_before.txt"; then
            echo "‚öôÔ∏è Corrigiendo URLs de staging en base de datos..."
            mysql -u"$DB_USER" -p"${DB_PASSWORD:-}" -h"${DB_HOST:-localhost}" -D"$STAG_DB" -e \
            "UPDATE wp_options SET option_value='https://staging.runartfoundry.com' WHERE option_name IN ('siteurl','home');" 2>/dev/null
            echo "‚úÖ URLs de staging corregidas."
        else
            echo "‚úÖ URLs de staging en BD ya correctas."
        fi
    else
        echo "‚ö†Ô∏è No se pudo acceder a la base de datos de staging"
        echo "Error de conexi√≥n a BD staging" > "$REPORT_DIR/stag_url_before.txt"
    fi
else
    echo "‚ö†Ô∏è Saltando verificaci√≥n de BD de staging (credenciales no disponibles o BD no detectada)"
    echo "BD no verificada" > "$REPORT_DIR/stag_url_before.txt"
fi

# Verificar y corregir uploads de staging
UPLOADS="/htdocs/staging/wp-content/uploads"
if [ -e "$UPLOADS" ]; then
    if [ -L "$UPLOADS" ]; then
        echo "‚ö†Ô∏è uploads en staging es enlace simb√≥lico a producci√≥n."
        if [ "$SAFE_MODE" = false ]; then
            echo "üîß Corrigiendo enlace simb√≥lico..."
            mv "$UPLOADS" "${UPLOADS}_backup_symlink_${DATE}" || true
            mkdir -p "$UPLOADS"
            if [ -d "/htdocs/wp-content/uploads" ]; then
                cp -R /htdocs/wp-content/uploads/* "$UPLOADS" 2>/dev/null || echo "‚ö†Ô∏è Copia parcial de im√°genes (verificar permisos)."
                echo "‚úÖ uploads de staging ahora es carpeta f√≠sica independiente."
            else
                echo "‚ö†Ô∏è Directorio uploads de producci√≥n no encontrado para copiar"
            fi
        else
            echo "üõ°Ô∏è MODO SEGURO: Se reporta pero no se modifica el enlace simb√≥lico"
        fi
    else
        echo "‚úÖ uploads en staging ya es carpeta f√≠sica."
    fi
else
    echo "‚ÑπÔ∏è Directorio uploads de staging no existe"
fi

# Regenerar permalinks (via REST API si hay credenciales)
if [ -n "${WP_USER:-}" ] && [ -n "${WP_APP_PASSWORD:-}" ]; then
    echo "‚Üí Regenerando permalinks para staging..."
    if curl -s -X POST "https://staging.runartfoundry.com/wp-json/wp/v2/settings" \
         -u "${WP_USER}:${WP_APP_PASSWORD}" \
         -H "Content-Type: application/json" \
         -d '{"permalink_structure":"/%postname%/"}' > /dev/null 2>&1; then
        echo "‚úÖ Permalinks regenerados para staging."
    else
        echo "‚ö†Ô∏è No se pudieron regenerar permalinks (verificar conexi√≥n a staging)"
    fi
else
    echo "‚ö†Ô∏è Credenciales WP no disponibles - saltando regeneraci√≥n de permalinks"
fi

###################################################################################################
# 4Ô∏è‚É£ PURGAR CACH√âS EXTERNOS (CLOUDFLARE)
###################################################################################################

if [ -n "${CLOUDFLARE_API_TOKEN:-}" ] && [ -n "${CF_ZONE_ID:-}" ]; then
    echo "‚Üí Purgando cach√© de Cloudflare para ambos dominios..."
    
    # Purge producci√≥n
    if curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
         -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
         -H "Content-Type: application/json" \
         --data '{"files":["https://runartfoundry.com"]}' > /dev/null 2>&1; then
        echo "‚úÖ Cach√© de producci√≥n purgado en Cloudflare"
    else
        echo "‚ö†Ô∏è Error al purgar cach√© de producci√≥n en Cloudflare"
    fi
    
    # Purge staging
    if curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
         -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
         -H "Content-Type: application/json" \
         --data '{"files":["https://staging.runartfoundry.com"]}' > /dev/null 2>&1; then
        echo "‚úÖ Cach√© de staging purgado en Cloudflare"
    else
        echo "‚ö†Ô∏è Error al purgar cach√© de staging en Cloudflare"
    fi
else
    echo "‚ö†Ô∏è Tokens Cloudflare no disponibles - saltando purge externo"
fi

###################################################################################################
# 5Ô∏è‚É£ VALIDAR Y DOCUMENTAR RESULTADO
###################################################################################################

echo "üßæ Generando reporte de reparaci√≥n..."

{
    echo "# üßæ Reparaci√≥n autom√°tica ‚Äî $DATE"
    echo ""
    echo "## Configuraci√≥n detectada"
    echo "- **Modo de ejecuci√≥n:** $([ "$SAFE_MODE" = true ] && echo "üõ°Ô∏è SEGURO (sin modificaciones)" || echo "üîß ACTIVO (con reparaciones)")"
    echo "- **BD producci√≥n:** $PROD_DB"
    echo "- **BD staging:** $STAG_DB"
    echo "- **Archivos wp-config encontrados:**"
    echo "  - Producci√≥n: $([ "$PROD_EXISTS" = true ] && echo "‚úÖ S√≠" || echo "‚ùå No")"
    echo "  - Staging: $([ "$STAG_EXISTS" = true ] && echo "‚úÖ S√≠" || echo "‚ùå No")"
    echo ""
    echo "## Acciones realizadas"
    echo ""
    echo "### üåê Producci√≥n (runartfoundry.com)"
    if [ "$SAFE_MODE" = false ] && [ "$PROD_EXISTS" = true ]; then
        echo "- ‚úÖ URLs corregidas en wp-config.php"
        echo "- ‚úÖ .htaccess verificado y limpiado"
        echo "- ‚úÖ Cach√© local limpiada"
        echo "- $([ -f "$REPORT_DIR/prod_url_before.txt" ] && echo "‚úÖ URLs en BD verificadas" || echo "‚ö†Ô∏è BD no accesible")"
    else
        echo "- ‚ö†Ô∏è Reparaciones saltadas (modo seguro o archivos no encontrados)"
    fi
    echo ""
    echo "### üß™ Staging (staging.runartfoundry.com)"
    if [ "$SAFE_MODE" = false ] && [ "$STAG_EXISTS" = true ]; then
        echo "- ‚úÖ URLs corregidas en wp-config.php"
        echo "- ‚úÖ Cach√© local limpiada"
        echo "- $([ -f "$REPORT_DIR/stag_url_before.txt" ] && echo "‚úÖ URLs en BD verificadas" || echo "‚ö†Ô∏è BD no accesible")"
        echo "- $([ -L "/htdocs/staging/wp-content/uploads" ] && echo "üîß Enlace simb√≥lico de uploads corregido" || echo "‚úÖ Uploads ya independientes")"
        echo "- $([ -n "${WP_USER:-}" ] && echo "‚úÖ Permalinks regenerados" || echo "‚ö†Ô∏è Permalinks no regenerados (sin credenciales)")"
    else
        echo "- ‚ö†Ô∏è Reparaciones saltadas (modo seguro o archivos no encontrados)"
    fi
    echo ""
    echo "### ‚òÅÔ∏è Cach√© externo"
    echo "- $([ -n "${CLOUDFLARE_API_TOKEN:-}" ] && echo "‚úÖ Cloudflare purgado para ambos dominios" || echo "‚ö†Ô∏è Cloudflare no purgado (sin tokens)")"
    echo ""
    echo "## Estado final"
    
    if [ "$PROD_DB" != "$STAG_DB" ] && [ "$PROD_DB" != "ARCHIVO_NO_ENCONTRADO" ] && [ "$STAG_DB" != "ARCHIVO_NO_ENCONTRADO" ]; then
        echo "‚úÖ **REPARACI√ìN EXITOSA**"
        echo "- Producci√≥n y staging utilizan bases de datos diferentes"
        echo "- URLs y configuraciones corregidas seg√∫n entorno"
        echo "- Archivos de uploads independizados"
        echo "- Cach√©s limpiadas"
    elif [ "$SAFE_MODE" = true ]; then
        echo "üõ°Ô∏è **EJECUCI√ìN EN MODO SEGURO**"
        echo "- No se detectaron archivos WordPress en las rutas esperadas"
        echo "- Esto es normal en entornos de desarrollo local"
        echo "- Para reparaci√≥n real, ejecutar en el servidor de hosting"
    else
        echo "‚ö†Ô∏è **REPARACI√ìN PARCIAL**"
        echo "- Algunas operaciones no se pudieron completar"
        echo "- Revisar logs de errores y credenciales"
        echo "- Bases de datos podr√≠an no estar accesibles"
    fi
    echo ""
    echo "## Respaldos creados"
    if [ "$SAFE_MODE" = false ]; then
        echo "- $([ "$PROD_EXISTS" = true ] && echo "‚úÖ wp-config producci√≥n: wp-config-prod-backup-$DATE.php" || echo "- No aplicable")"
        echo "- $([ "$STAG_EXISTS" = true ] && echo "‚úÖ wp-config staging: wp-config-staging-backup-$DATE.php" || echo "- No aplicable")"
        echo "- $([ -f "$REPORT_DIR/htaccess-backup-$DATE" ] && echo "‚úÖ .htaccess: htaccess-backup-$DATE" || echo "- .htaccess no respaldado")"
    else
        echo "- No se crearon respaldos (modo seguro)"
    fi
    echo ""
    echo "## Pr√≥ximos pasos recomendados"
    echo "1. **Verificar funcionamiento:**"
    echo "   - Acceder a https://runartfoundry.com (debe mostrar sitio original)"
    echo "   - Acceder a https://staging.runartfoundry.com (debe estar aislado)"
    echo "2. **Validar contenido:**"
    echo "   - Confirmar que im√°genes/uploads funcionan en ambos sitios"
    echo "   - Probar funcionalidades principales en ambos entornos"
    echo "3. **Monitoreo continuo:**"
    echo "   - Ejecutar auditor√≠as peri√≥dicas con staging_isolation_audit.sh"
    echo "   - Verificar que no vuelvan a mezclarse los entornos"
    echo ""
    echo "---"
    echo "*Reparaci√≥n completada respetando pol√≠tica de no eliminaci√≥n de datos*"
} > "$REPORT_DIR/repair_summary_${DATE}.md"

# Verificar si estamos en un repositorio git antes de hacer commit
if git rev-parse --git-dir > /dev/null 2>&1; then
    git add "$REPORT_DIR/" 2>/dev/null || true
    git commit -m "Reparaci√≥n autom√°tica de producci√≥n y aislamiento staging ($DATE)" 2>/dev/null || echo "‚ÑπÔ∏è Sin cambios para commit"
    git push origin main 2>/dev/null || echo "‚ÑπÔ∏è No se pudo hacer push (verificar configuraci√≥n git)"
else
    echo "‚ÑπÔ∏è No se detect√≥ repositorio git - saltando commit"
fi

echo ""
echo "=== ‚úÖ REPARACI√ìN COMPLETA ==="
echo "‚Üí Reporte detallado: $REPORT_DIR/repair_summary_${DATE}.md"

if [ "$SAFE_MODE" = true ]; then
    echo "‚Üí Ejecutado en MODO SEGURO (desarrollo local)"
    echo "‚Üí Para reparaci√≥n real, ejecutar en servidor de hosting con archivos WordPress"
else
    echo "‚Üí runartfoundry.com: URLs y configuraci√≥n restauradas"
    echo "‚Üí staging.runartfoundry.com: Aislado y configurado independientemente"
    echo "‚Üí Respaldos de seguridad disponibles en $REPORT_DIR/"
fi

echo ""