#!/bin/bash
# üß© COPAYLO ‚Äî REPARACI√ìN FINAL PRODUCCI√ìN/STAGING (SIN /htdocs) ¬∑ RUN ART FOUNDRY
# Objetivo: corregir mezcla de entornos, restaurar producci√≥n y aislar staging.
# Estructura real: WordPress est√° directamente en la ra√≠z /, y staging en /staging.
# Pol√≠tica: sin eliminaciones, sin sobreescrituras destructivas. Todo queda respaldado y logeado.

set -euo pipefail

DATE=$(date +%Y%m%d_%H%M%S)
REPORT_DIR="_reports/repair_final"
mkdir -p "$REPORT_DIR"

echo "=== üîç INICIANDO REPARACI√ìN FINAL ‚Äî ESTRUCTURA RA√çZ DETECTADA ==="

###################################################################################################
# 0Ô∏è‚É£ VALIDACIONES DE SEGURIDAD Y DETECCI√ìN DE ENTORNO
###################################################################################################

echo "‚Üí Validando estructura de archivos..."

PROD_WP="/wp-config.php"
STAGING_WP="/staging/wp-config.php"

# Detectar si estamos en entorno local o servidor real
if [ ! -f "$PROD_WP" ] && [ ! -f "$STAGING_WP" ]; then
    echo "‚ö†Ô∏è ADVERTENCIA: No se encontraron archivos wp-config en estructura ra√≠z"
    echo "   Esto indica ejecuci√≥n en entorno local/desarrollo"
    echo "   Continuando en MODO SEGURO (sin modificaciones)"
    SAFE_MODE=true
    PROD_EXISTS=false
    STAG_EXISTS=false
else
    SAFE_MODE=false
    PROD_EXISTS=true
    STAG_EXISTS=true
fi

if [ "$SAFE_MODE" = true ]; then
    echo "üõ°Ô∏è MODO SEGURO ACTIVADO"
    echo "   El script generar√° reportes sin modificar archivos"
    echo ""
fi

###################################################################################################
# 1Ô∏è‚É£ DETECTAR ENTORNOS Y BASES DE DATOS
###################################################################################################

if [ "$PROD_EXISTS" = false ]; then
    echo "‚ÑπÔ∏è wp-config.php de producci√≥n esperado en: $PROD_WP (no encontrado)"
    PROD_DB="ARCHIVO_NO_ENCONTRADO"
else
    if [ ! -f "$PROD_WP" ]; then
        echo "‚ùå No se encontr√≥ wp-config.php de producci√≥n en ra√≠z."
        if [ "$SAFE_MODE" = false ]; then
            echo "   Abortando para evitar operaciones sin contexto."
            exit 1
        fi
        PROD_DB="ARCHIVO_NO_ENCONTRADO"
    else
        PROD_DB=$(grep "DB_NAME" "$PROD_WP" | cut -d"'" -f4 2>/dev/null || echo "NO_DETECTADO")
    fi
fi

if [ "$STAG_EXISTS" = false ]; then
    echo "‚ÑπÔ∏è wp-config.php de staging esperado en: $STAGING_WP (no encontrado)"
    STAG_DB="ARCHIVO_NO_ENCONTRADO"
else
    if [ ! -f "$STAGING_WP" ]; then
        echo "‚ùå No se encontr√≥ wp-config.php de staging en /staging."
        if [ "$SAFE_MODE" = false ]; then
            echo "   Abortando para evitar operaciones sin contexto."
            exit 1
        fi
        STAG_DB="ARCHIVO_NO_ENCONTRADO"
    else
        STAG_DB=$(grep "DB_NAME" "$STAGING_WP" | cut -d"'" -f4 2>/dev/null || echo "NO_DETECTADO")
    fi
fi

echo "üß± Producci√≥n usa DB: $PROD_DB"
echo "üß± Staging usa DB: $STAG_DB"

# VALIDACI√ìN CR√çTICA: Verificar que las BD son diferentes
if [ "$PROD_DB" = "$STAG_DB" ] && [ "$PROD_DB" != "ARCHIVO_NO_ENCONTRADO" ] && [ "$PROD_DB" != "NO_DETECTADO" ]; then
    echo "üö® PELIGRO CR√çTICO: Ambos entornos apuntan a la misma base de datos: $PROD_DB"
    echo "   ABORTANDO para evitar corrupci√≥n de datos"
    exit 1
fi

# Crear respaldos de archivos de configuraci√≥n
if [ "$SAFE_MODE" = false ]; then
    echo "‚Üí Creando respaldos de seguridad..."
    [ -f "$PROD_WP" ] && cp "$PROD_WP" "$REPORT_DIR/wp-config-prod-backup-$DATE.php"
    [ -f "$STAGING_WP" ] && cp "$STAGING_WP" "$REPORT_DIR/wp-config-staging-backup-$DATE.php"
    echo "‚úÖ Respaldos creados en $REPORT_DIR/"
fi

###################################################################################################
# 2Ô∏è‚É£ REPARAR PRODUCCI√ìN (runartfoundry.com)
###################################################################################################
echo ""
echo "=== üîß REPARANDO PRODUCCI√ìN ==="

if [ "$SAFE_MODE" = false ] && [ -f "$PROD_WP" ]; then
    echo "‚Üí Corrigiendo URLs en wp-config.php de producci√≥n..."
    
    # Asegurar URLs correctas en wp-config.php
    sed -i '/WP_HOME/d' "$PROD_WP" || true
    sed -i '/WP_SITEURL/d' "$PROD_WP" || true
    echo "define('WP_HOME','https://runartfoundry.com');" >> "$PROD_WP"
    echo "define('WP_SITEURL','https://runartfoundry.com');" >> "$PROD_WP"
    echo "‚úÖ URLs fijas agregadas en wp-config.php de producci√≥n."
    
    # Revisar y limpiar .htaccess
    HTACCESS="/.htaccess"
    if [ -f "$HTACCESS" ]; then
        if grep -q "staging.runartfoundry.com" "$HTACCESS"; then
            cp "$HTACCESS" "$REPORT_DIR/htaccess_backup_prod_${DATE}.txt" || true
            sed -i '/staging.runartfoundry.com/d' "$HTACCESS"
            echo "‚úÖ .htaccess limpio (redirecciones a staging eliminadas)."
        else
            echo "‚úÖ .htaccess sin redirecciones a staging."
        fi
    else
        echo "‚ÑπÔ∏è Archivo .htaccess no encontrado en ra√≠z"
    fi
    
    # Limpiar cach√© producci√≥n
    if [ -d "/wp-content/cache" ]; then
        rm -rf /wp-content/cache/* 2>/dev/null || true
        echo "‚úÖ Cach√© local de producci√≥n limpiada."
    else
        echo "‚ÑπÔ∏è No se encontr√≥ cach√© local en producci√≥n."
    fi
else
    echo "‚ö†Ô∏è Saltando reparaci√≥n de producci√≥n (modo seguro o archivos no encontrados)"
fi

# Verificar y corregir siteurl/home en DB de producci√≥n
if [ "$PROD_DB" != "ARCHIVO_NO_ENCONTRADO" ] && [ "$PROD_DB" != "NO_DETECTADO" ] && [ -n "${DB_USER:-}" ]; then
    echo "‚Üí Verificando URLs en base de datos de producci√≥n..."
    QUERY="SELECT option_name, option_value FROM wp_options WHERE option_name IN ('siteurl','home');"
    
    if mysql -u"$DB_USER" -p"${DB_PASSWORD:-}" -h"${DB_HOST:-localhost}" -D"$PROD_DB" -e "$QUERY" > "$REPORT_DIR/prod_urls_before.txt" 2>/dev/null; then
        if grep -q "staging.runartfoundry.com" "$REPORT_DIR/prod_urls_before.txt"; then
            echo "‚öôÔ∏è Corrigiendo URLs de producci√≥n en base de datos..."
            mysql -u"$DB_USER" -p"${DB_PASSWORD:-}" -h"${DB_HOST:-localhost}" -D"$PROD_DB" -e \
            "UPDATE wp_options SET option_value='https://runartfoundry.com' WHERE option_name IN ('siteurl','home');" 2>/dev/null
            echo "‚úÖ URLs de producci√≥n restauradas correctamente."
        else
            echo "‚úÖ URLs de producci√≥n ya correctas."
        fi
    else
        echo "‚ö†Ô∏è No se pudo acceder a la base de datos de producci√≥n"
        echo "Error de conexi√≥n a BD producci√≥n" > "$REPORT_DIR/prod_urls_before.txt"
    fi
else
    echo "‚ö†Ô∏è Saltando verificaci√≥n de BD de producci√≥n (credenciales no disponibles o BD no detectada)"
    echo "BD no verificada" > "$REPORT_DIR/prod_urls_before.txt"
fi

###################################################################################################
# 3Ô∏è‚É£ REPARAR STAGING (staging.runartfoundry.com)
###################################################################################################
echo ""
echo "=== üîß REPARANDO STAGING ==="

if [ "$SAFE_MODE" = false ] && [ -f "$STAGING_WP" ]; then
    echo "‚Üí Corrigiendo URLs en wp-config.php de staging..."
    
    # Asegurar URLs de staging en wp-config.php
    sed -i '/WP_HOME/d' "$STAGING_WP" || true
    sed -i '/WP_SITEURL/d' "$STAGING_WP" || true
    echo "define('WP_HOME','https://staging.runartfoundry.com');" >> "$STAGING_WP"
    echo "define('WP_SITEURL','https://staging.runartfoundry.com');" >> "$STAGING_WP"
    echo "‚úÖ URLs fijas agregadas en wp-config.php de staging."
    
    # Limpiar cach√© de staging
    if [ -d "/staging/wp-content/cache" ]; then
        rm -rf /staging/wp-content/cache/* 2>/dev/null || true
        echo "‚úÖ Cach√© local de staging limpiada."
    else
        echo "‚ÑπÔ∏è No se encontr√≥ cach√© local en staging."
    fi
else
    echo "‚ö†Ô∏è Saltando reparaci√≥n de staging (modo seguro o archivos no encontrados)"
fi

# Corregir siteurl/home en DB de staging
if [ "$STAG_DB" != "ARCHIVO_NO_ENCONTRADO" ] && [ "$STAG_DB" != "NO_DETECTADO" ] && [ -n "${DB_USER:-}" ]; then
    echo "‚Üí Verificando URLs en base de datos de staging..."
    QUERY="SELECT option_name, option_value FROM wp_options WHERE option_name IN ('siteurl','home');"
    
    if mysql -u"$DB_USER" -p"${DB_PASSWORD:-}" -h"${DB_HOST:-localhost}" -D"$STAG_DB" -e "$QUERY" > "$REPORT_DIR/staging_urls_before.txt" 2>/dev/null; then
        if grep -q "runartfoundry.com" "$REPORT_DIR/staging_urls_before.txt" && ! grep -q "staging.runartfoundry.com" "$REPORT_DIR/staging_urls_before.txt"; then
            echo "‚öôÔ∏è Corrigiendo URLs de staging en base de datos..."
            mysql -u"$DB_USER" -p"${DB_PASSWORD:-}" -h"${DB_HOST:-localhost}" -D"$STAG_DB" -e \
            "UPDATE wp_options SET option_value='https://staging.runartfoundry.com' WHERE option_name IN ('siteurl','home');" 2>/dev/null
            echo "‚úÖ URLs de staging corregidas."
        else
            echo "‚úÖ URLs de staging ya correctas."
        fi
    else
        echo "‚ö†Ô∏è No se pudo acceder a la base de datos de staging"
        echo "Error de conexi√≥n a BD staging" > "$REPORT_DIR/staging_urls_before.txt"
    fi
else
    echo "‚ö†Ô∏è Saltando verificaci√≥n de BD de staging (credenciales no disponibles o BD no detectada)"
    echo "BD no verificada" > "$REPORT_DIR/staging_urls_before.txt"
fi

# Verificar carpeta uploads de staging
UPLOADS="/staging/wp-content/uploads"
if [ -e "$UPLOADS" ]; then
    if [ -L "$UPLOADS" ]; then
        echo "‚ö†Ô∏è uploads en staging es un enlace simb√≥lico a producci√≥n."
        if [ "$SAFE_MODE" = false ]; then
            echo "üîß Corrigiendo enlace simb√≥lico..."
            mv "$UPLOADS" "${UPLOADS}_backup_symlink_${DATE}" 2>/dev/null || true
            mkdir -p "$UPLOADS"
            if [ -d "/wp-content/uploads" ]; then
                cp -R /wp-content/uploads/* "$UPLOADS" 2>/dev/null || echo "‚ö†Ô∏è Copia parcial de im√°genes, verificar permisos."
                echo "‚úÖ uploads de staging ahora es carpeta f√≠sica independiente."
            else
                echo "‚ö†Ô∏è Directorio uploads de producci√≥n no encontrado para copiar"
            fi
        else
            echo "üõ°Ô∏è MODO SEGURO: Se reporta pero no se modifica el enlace simb√≥lico"
        fi
    else
        echo "‚úÖ uploads de staging ya es carpeta f√≠sica."
    fi
else
    echo "‚ÑπÔ∏è Directorio uploads de staging no existe en $UPLOADS"
fi

###################################################################################################
# 4Ô∏è‚É£ REGENERAR PERMALINKS Y PURGAR CACH√âS EXTERNOS
###################################################################################################
echo ""
echo "=== üîÑ OPTIMIZACIONES FINALES ==="

# Regenerar permalinks de staging (via REST API)
if [ -n "${WP_USER:-}" ] && [ -n "${WP_APP_PASSWORD:-}" ]; then
    echo "‚Üí Regenerando permalinks para staging..."
    if curl -s -X POST "https://staging.runartfoundry.com/wp-json/wp/v2/settings" \
         -u "${WP_USER}:${WP_APP_PASSWORD}" \
         -H "Content-Type: application/json" \
         -d '{"permalink_structure":"/%postname%/"}' > /dev/null 2>&1; then
        echo "‚úÖ Permalinks regenerados para staging."
    else
        echo "‚ö†Ô∏è No se pudieron regenerar permalinks (verificar conexi√≥n a staging)"
    fi
else
    echo "‚ö†Ô∏è Credenciales WP no disponibles - saltando regeneraci√≥n de permalinks"
fi

# Purgar cach√©s de Cloudflare
if [ -n "${CLOUDFLARE_API_TOKEN:-}" ] && [ -n "${CF_ZONE_ID:-}" ]; then
    echo "‚Üí Purgando cach√© de Cloudflare para ambos dominios..."
    
    # Purge producci√≥n
    if curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
         -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
         -H "Content-Type: application/json" \
         --data '{"files":["https://runartfoundry.com"]}' > /dev/null 2>&1; then
        echo "‚úÖ Cach√© de producci√≥n purgado en Cloudflare"
    else
        echo "‚ö†Ô∏è Error al purgar cach√© de producci√≥n en Cloudflare"
    fi
    
    # Purge staging
    if curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
         -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
         -H "Content-Type: application/json" \
         --data '{"files":["https://staging.runartfoundry.com"]}' > /dev/null 2>&1; then
        echo "‚úÖ Cach√© de staging purgado en Cloudflare"
    else
        echo "‚ö†Ô∏è Error al purgar cach√© de staging en Cloudflare"
    fi
else
    echo "‚ö†Ô∏è Tokens Cloudflare no disponibles - saltando purge externo"
fi

###################################################################################################
# 5Ô∏è‚É£ VALIDAR RESULTADOS Y GENERAR REPORTE FINAL
###################################################################################################
echo ""
echo "üßæ Generando reporte final..."

{
    echo "# üßæ REPARACI√ìN FINAL ‚Äî $DATE"
    echo ""
    echo "## Estructura detectada"
    echo "- **Modo ejecuci√≥n:** $([ "$SAFE_MODE" = true ] && echo "üõ°Ô∏è SEGURO (sin modificaciones)" || echo "üîß ACTIVO (con reparaciones)")"
    echo "- **Producci√≥n (ra√≠z /):** $([ -f "$PROD_WP" ] && echo "‚úÖ Detectada" || echo "‚ùå No encontrada")"
    echo "- **Staging (/staging):** $([ -f "$STAGING_WP" ] && echo "‚úÖ Detectada" || echo "‚ùå No encontrada")"
    echo ""
    echo "## Configuraci√≥n de bases de datos"
    echo "- **BD Producci√≥n:** $PROD_DB"
    echo "- **BD Staging:** $STAG_DB"
    
    if [ "$PROD_DB" != "$STAG_DB" ] && [ "$PROD_DB" != "ARCHIVO_NO_ENCONTRADO" ] && [ "$STAG_DB" != "ARCHIVO_NO_ENCONTRADO" ]; then
        echo "- **Estado:** ‚úÖ Bases de datos diferentes (aislamiento correcto)"
    else
        echo "- **Estado:** ‚ö†Ô∏è No se pudo confirmar aislamiento de BD"
    fi
    echo ""
    echo "## Acciones realizadas"
    echo ""
    echo "### üåê Producci√≥n (runartfoundry.com)"
    if [ "$SAFE_MODE" = false ] && [ -f "$PROD_WP" ]; then
        echo "- ‚úÖ URLs restauradas en wp-config.php"
        echo "- ‚úÖ .htaccess verificado y limpiado"
        echo "- ‚úÖ Cach√© local procesada"
        echo "- $([ -f "$REPORT_DIR/prod_urls_before.txt" ] && echo "‚úÖ URLs en BD verificadas" || echo "‚ö†Ô∏è BD no accesible")"
    else
        echo "- ‚ö†Ô∏è Reparaciones saltadas (modo seguro o archivos no encontrados)"
    fi
    echo ""
    echo "### üß™ Staging (staging.runartfoundry.com)"
    if [ "$SAFE_MODE" = false ] && [ -f "$STAGING_WP" ]; then
        echo "- ‚úÖ URLs corregidas en wp-config.php"
        echo "- ‚úÖ Cach√© local procesada"
        echo "- $([ -f "$REPORT_DIR/staging_urls_before.txt" ] && echo "‚úÖ URLs en BD verificadas" || echo "‚ö†Ô∏è BD no accesible")"
        echo "- $([ -L "/staging/wp-content/uploads" ] && echo "üîß Enlace simb√≥lico de uploads corregido" || echo "‚úÖ Uploads independientes")"
        echo "- $([ -n "${WP_USER:-}" ] && echo "‚úÖ Permalinks regenerados" || echo "‚ö†Ô∏è Permalinks no regenerados")"
    else
        echo "- ‚ö†Ô∏è Reparaciones saltadas (modo seguro o archivos no encontrados)"
    fi
    echo ""
    echo "### ‚òÅÔ∏è Optimizaciones"
    echo "- $([ -n "${CLOUDFLARE_API_TOKEN:-}" ] && echo "‚úÖ Cloudflare purgado para ambos dominios" || echo "‚ö†Ô∏è Cloudflare no purgado")"
    echo ""
    echo "## Estado final"
    
    if [ "$SAFE_MODE" = true ]; then
        echo "üõ°Ô∏è **EJECUCI√ìN EN MODO SEGURO**"
        echo "- Script ejecutado en entorno local/desarrollo"
        echo "- No se realizaron modificaciones"
        echo "- Para reparaci√≥n real, ejecutar en servidor con archivos WordPress"
    elif [ "$PROD_DB" != "$STAG_DB" ] && [ "$PROD_DB" != "ARCHIVO_NO_ENCONTRADO" ] && [ "$STAG_DB" != "ARCHIVO_NO_ENCONTRADO" ]; then
        echo "‚úÖ **REPARACI√ìN EXITOSA**"
        echo "- Entornos correctamente separados"
        echo "- Producci√≥n restaurada al dominio principal"
        echo "- Staging aislado y funcional"
        echo "- Cach√©s limpiadas en todos los niveles"
    else
        echo "‚ö†Ô∏è **REPARACI√ìN PARCIAL**"
        echo "- Algunas operaciones no se pudieron completar"
        echo "- Revisar logs y credenciales"
        echo "- Puede requerir intervenci√≥n manual"
    fi
    echo ""
    echo "## Respaldos creados"
    if [ "$SAFE_MODE" = false ]; then
        echo "- $([ -f "$REPORT_DIR/wp-config-prod-backup-$DATE.php" ] && echo "‚úÖ wp-config producci√≥n: wp-config-prod-backup-$DATE.php" || echo "- No aplicable")"
        echo "- $([ -f "$REPORT_DIR/wp-config-staging-backup-$DATE.php" ] && echo "‚úÖ wp-config staging: wp-config-staging-backup-$DATE.php" || echo "- No aplicable")"
        echo "- $([ -f "$REPORT_DIR/htaccess_backup_prod_${DATE}.txt" ] && echo "‚úÖ .htaccess: htaccess_backup_prod_${DATE}.txt" || echo "- .htaccess no respaldado")"
    else
        echo "- No se crearon respaldos (modo seguro)"
    fi
    echo ""
    echo "## Pr√≥ximos pasos recomendados"
    echo "1. **Verificar funcionamiento inmediato:**"
    echo "   \`\`\`bash"
    echo "   curl -I https://runartfoundry.com"
    echo "   curl -I https://staging.runartfoundry.com"
    echo "   \`\`\`"
    echo ""
    echo "2. **Validar contenido:**"
    echo "   - Acceder a ambos sitios desde navegador"
    echo "   - Confirmar que im√°genes/uploads funcionan"
    echo "   - Probar login de admin en ambos entornos"
    echo ""
    echo "3. **Monitoreo continuo:**"
    echo "   - Ejecutar auditor√≠as semanales"
    echo "   - Verificar que no vuelvan a mezclarse"
    echo "   - Mantener respaldos actualizados"
    echo ""
    echo "---"
    echo "*Reparaci√≥n completada sin eliminaci√≥n de datos - Pol√≠tica de seguridad respetada*"
} > "$REPORT_DIR/repair_final_${DATE}.md"

# Verificar si estamos en un repositorio git antes de hacer commit
if git rev-parse --git-dir > /dev/null 2>&1; then
    git add "$REPORT_DIR/" 2>/dev/null || true
    git commit -m "Reparaci√≥n final producci√≥n/staging (estructura ra√≠z) $DATE" 2>/dev/null || echo "‚ÑπÔ∏è Sin cambios para commit"
    git push origin main 2>/dev/null || echo "‚ÑπÔ∏è No se pudo hacer push (verificar configuraci√≥n git)"
else
    echo "‚ÑπÔ∏è No se detect√≥ repositorio git - saltando commit"
fi

echo ""
echo "=== ‚úÖ REPARACI√ìN FINAL COMPLETADA ==="
echo "‚Üí Reporte detallado: $REPORT_DIR/repair_final_${DATE}.md"

if [ "$SAFE_MODE" = true ]; then
    echo "‚Üí Ejecutado en MODO SEGURO (desarrollo local)"
    echo "‚Üí Para reparaci√≥n real, ejecutar en servidor con WordPress en estructura ra√≠z"
else
    echo "‚Üí runartfoundry.com: Restaurado al sitio del cliente"
    echo "‚Üí staging.runartfoundry.com: Aislado y funcional"
    echo "‚Üí Respaldos de seguridad disponibles en $REPORT_DIR/"
fi

echo ""
