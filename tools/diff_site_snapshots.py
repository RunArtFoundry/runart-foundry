#!/usr/bin/env python3
"""Diff generator for site inventory snapshots.

Reads two TSV snapshots (generated by ``list_site_pages.py``) and reports
added, removed, changed and unchanged HTML files based on their SHA256 hash.
Optionally writes a Markdown report summarising the differences.
"""
from __future__ import annotations

import argparse
import datetime as dt
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, Iterable, List, Tuple


@dataclass(frozen=True)
class SnapshotEntry:
    path: str
    size: int
    sha256: str


@dataclass
class DiffResult:
    added: List[SnapshotEntry]
    removed: List[SnapshotEntry]
    changed: List[Tuple[SnapshotEntry, SnapshotEntry]]
    unchanged: List[SnapshotEntry]


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--old", required=True, help="Snapshot TSV de referencia")
    parser.add_argument("--new", required=True, help="Snapshot TSV a comparar")
    parser.add_argument(
        "--md-output",
        help="Archivo Markdown para escribir el reporte del diff",
    )
    parser.add_argument(
        "--include-unchanged", action="store_true", help="Imprimir también rutas sin cambios"
    )
    return parser.parse_args()


def read_snapshot(path: Path) -> Dict[str, SnapshotEntry]:
    entries: Dict[str, SnapshotEntry] = {}
    with path.open("r", encoding="utf-8") as handle:
        for line_number, raw_line in enumerate(handle, start=1):
            line = raw_line.strip()
            if not line or line.startswith("#"):
                continue
            parts = line.split("\t")
            if len(parts) != 3:
                raise ValueError(
                    f"Formato inválido en {path}:{line_number}: se esperaban 3 columnas"
                )
            rel_path, size_str, checksum = parts
            try:
                size = int(size_str)
            except ValueError as exc:  # pragma: no cover - datos corruptos
                raise ValueError(
                    f"Tamaño inválido en {path}:{line_number}: {size_str}"
                ) from exc
            entries[rel_path] = SnapshotEntry(rel_path, size, checksum)
    return entries


def diff_snapshots(old: Dict[str, SnapshotEntry], new: Dict[str, SnapshotEntry]) -> DiffResult:
    old_keys = set(old)
    new_keys = set(new)

    added_keys = sorted(new_keys - old_keys)
    removed_keys = sorted(old_keys - new_keys)
    common_keys = sorted(old_keys & new_keys)

    added = [new[key] for key in added_keys]
    removed = [old[key] for key in removed_keys]

    changed: List[Tuple[SnapshotEntry, SnapshotEntry]] = []
    unchanged: List[SnapshotEntry] = []
    for key in common_keys:
        old_entry = old[key]
        new_entry = new[key]
        if old_entry.sha256 != new_entry.sha256:
            changed.append((old_entry, new_entry))
        else:
            unchanged.append(new_entry)

    return DiffResult(added, removed, changed, unchanged)


def pluralize(label: str, count: int) -> str:
    suffix = "s" if count != 1 else ""
    return f"{count} {label}{suffix}"


def print_summary(result: DiffResult, include_unchanged: bool) -> None:
    totals = {
        "added": len(result.added),
        "removed": len(result.removed),
        "changed": len(result.changed),
        "unchanged": len(result.unchanged),
    }
    print("[diff_site_snapshots] Resumen:")
    print(f"  + Añadidos: {totals['added']}")
    print(f"  - Eliminados: {totals['removed']}")
    print(f"  * Modificados: {totals['changed']}")
    print(f"    = Sin cambios: {totals['unchanged']}")

    if result.added:
        print("\n[ADD] Rutas nuevas:")
        for entry in result.added:
            print(f"  - {entry.path} ({entry.size} bytes) {entry.sha256}")

    if result.removed:
        print("\n[DEL] Rutas eliminadas:")
        for entry in result.removed:
            print(f"  - {entry.path} ({entry.size} bytes) {entry.sha256}")

    if result.changed:
        print("\n[CHG] Rutas modificadas:")
        for old_entry, new_entry in result.changed:
            print(
                "  - {path}\n"
                "    · old: {old_size} bytes {old_hash}\n"
                "    · new: {new_size} bytes {new_hash}".format(
                    path=new_entry.path,
                    old_size=old_entry.size,
                    old_hash=old_entry.sha256,
                    new_size=new_entry.size,
                    new_hash=new_entry.sha256,
                )
            )

    if include_unchanged and result.unchanged:
        print("\n[EQ] Rutas sin cambios:")
        for entry in result.unchanged:
            print(f"  - {entry.path}")


def format_section(title: str, lines: Iterable[str]) -> List[str]:
    block = [f"## {title}"]
    block.extend(lines)
    block.append("")
    return block


def render_markdown(
    result: DiffResult,
    old_path: Path,
    new_path: Path,
    generated_at: dt.datetime,
) -> str:
    lines: List[str] = []
    lines.append("# Diff de páginas del build preview")
    lines.append("")
    lines.append(f"- Fecha: {generated_at.isoformat()}Z")
    lines.append(f"- Snapshot base: `{old_path}`")
    lines.append(f"- Snapshot comparado: `{new_path}`")
    lines.append("")

    summary = (
        f"- {pluralize('ruta añadida', len(result.added))}\n"
        f"- {pluralize('ruta eliminada', len(result.removed))}\n"
        f"- {pluralize('ruta modificada', len(result.changed))}\n"
        f"- {pluralize('ruta sin cambio', len(result.unchanged))}"
    )
    lines.append("## Resumen")
    lines.append(summary)
    lines.append("")

    if result.added:
        items = [
            f"- `{entry.path}` — {entry.size} bytes — {entry.sha256}"
            for entry in result.added
        ]
        lines.extend(format_section("Rutas añadidas", items))

    if result.removed:
        items = [
            f"- `{entry.path}` — {entry.size} bytes — {entry.sha256}"
            for entry in result.removed
        ]
        lines.extend(format_section("Rutas eliminadas", items))

    if result.changed:
        items = []
        for old_entry, new_entry in result.changed:
            items.append(
                "- `{path}`\n"
                "  - old: {old_size} bytes — {old_hash}\n"
                "  - new: {new_size} bytes — {new_hash}".format(
                    path=new_entry.path,
                    old_size=old_entry.size,
                    old_hash=old_entry.sha256,
                    new_size=new_entry.size,
                    new_hash=new_entry.sha256,
                )
            )
        lines.extend(format_section("Rutas modificadas", items))

    if not any([result.added, result.removed, result.changed]):
        lines.extend(
            format_section("Observaciones", ["- Sin diferencias entre snapshots."])
        )

    return "\n".join(lines).rstrip() + "\n"


def write_markdown(path: Path, content: str) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8")


def main() -> int:
    args = parse_args()
    old_path = Path(args.old).resolve()
    new_path = Path(args.new).resolve()

    if not old_path.exists():
        raise SystemExit(f"[diff_site_snapshots] Snapshot base no encontrado: {old_path}")
    if not new_path.exists():
        raise SystemExit(f"[diff_site_snapshots] Snapshot comparado no encontrado: {new_path}")

    old_snapshot = read_snapshot(old_path)
    new_snapshot = read_snapshot(new_path)
    result = diff_snapshots(old_snapshot, new_snapshot)

    print_summary(result, args.include_unchanged)

    if args.md_output:
        markdown = render_markdown(result, old_path, new_path, dt.datetime.utcnow())
        write_markdown(Path(args.md_output), markdown)
        print(f"\n[diff_site_snapshots] Reporte Markdown escrito en {args.md_output}")

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
