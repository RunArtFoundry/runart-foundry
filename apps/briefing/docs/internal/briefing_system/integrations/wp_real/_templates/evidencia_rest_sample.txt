EVIDENCIA: WordPress REST API Accesibilidad y Autenticación
=========================================================
Fecha de captura: [COMPLETAR: 2025-10-20]
Capturado por: [COMPLETAR: Owner name]
Método: curl (o navegador + DevTools)

INSTRUCCIONES:
==============

Ejecuta estos comandos curl EXACTAMENTE como se muestran.
No necesitas cargar credenciales reales — solo validamos que endpoints existen.

Abre terminal (local o SSH en servidor) y ejecuta:

---

PASO 1: VALIDAR /wp-json/ ACCESIBLE
===================================

curl -i https://runalfondry.com/wp-json/

Copia TODO el output incluyendo headers:

=== INICIA OUTPUT: /wp-json/ ===

[PEGA AQUÍ TODO (headers + body)]

=== FIN OUTPUT ===

Resultado esperado:
  HTTP/1.1 200 OK
  Content-Type: application/json
  [JSON content con "name": "RunArtFoundry", ...]

Resultado MALO (no ejecutar Fase 7):
  HTTP/1.1 404 Not Found
  ❌ REST API no está disponible

---

PASO 2: VALIDAR ENDPOINT /wp-json/wp/v2/users/me (SIN AUTENTICAR)
================================================================

curl -i https://runalfondry.com/wp-json/wp/v2/users/me

Copia output (espera 401 Unauthorized):

=== INICIA OUTPUT: /wp/v2/users/me (SIN AUTH) ===

[PEGA AQUÍ TODO (headers + body)]

=== FIN OUTPUT ===

Resultado esperado:
  HTTP/1.1 401 Unauthorized
  [JSON: {"code": "rest_not_logged_in", ...}]

Resultado MALO:
  HTTP/1.1 200 OK
  (Significa: API no requiere autenticación — posible riesgo de seguridad)

---

PASO 3: VALIDAR DISPONIBILIDAD DE OTROS ENDPOINTS (SIN AUTENTICAR)
==================================================================

Estos deben ser accesibles públicamente:

3.1: Páginas publicadas
   curl -i https://runalfondry.com/wp-json/wp/v2/pages | head -20

=== INICIA OUTPUT: /wp/v2/pages ===

[PEGA PRIMERAS 20 LÍNEAS]

=== FIN OUTPUT ===

3.2: Posts publicados
   curl -i https://runalfondry.com/wp-json/wp/v2/posts | head -20

=== INICIA OUTPUT: /wp/v2/posts ===

[PEGA PRIMERAS 20 LÍNEAS]

=== FIN OUTPUT ===

3.3: Categorías
   curl -i https://runalfondry.com/wp-json/wp/v2/categories | head -20

=== INICIA OUTPUT: /wp/v2/categories ===

[PEGA PRIMERAS 20 LÍNEAS]

=== FIN OUTPUT ===

3.4: Menús (si plugin WP REST Menu está instalado)
   curl -i https://runalfondry.com/wp-json/menus/v1/menus | head -20

=== INICIA OUTPUT: /menus/v1/menus ===

[PEGA PRIMERAS 20 LÍNEAS O "endpoint not found"]

=== FIN OUTPUT ===

---

PASO 4: VALIDAR CERTIFICATE SSL
===============================

curl -v https://runalfondry.com 2>&1 | grep -A 5 "subject="

=== INICIA OUTPUT: SSL CERTIFICATE ===

[PEGA LÍNEAS CON "subject=", "issuer=", "expiration"]

=== FIN OUTPUT ===

Resultado esperado:
  subject=CN=runalfondry.com (o CN=*.runalfondry.com)
  issuer=C=..., O=Let's Encrypt (o similar)
  (Sin errores de certificate chain)

---

NOTAS DE SEGURIDAD:
===================

❌ NO HAGAS:
- ❌ Incluir credenciales (WP_USER, WP_APP_PASSWORD) en estos comandos
- ❌ Usar credenciales en curl si es posible
- ❌ Guardar output con credenciales en git

✅ SÍ PUEDES:
- ✅ Validar que endpoints responden
- ✅ Verificar que requieren autenticación (401)
- ✅ Confirmar estructura JSON
- ✅ Ver status codes y headers

Si necesitas probar CON credenciales más adelante:
  curl -u username:password https://runalfondry.com/wp-json/wp/v2/users/me
  (Pero NO pegues el output aquí)

---

VALIDACIÓN POSTERIOR (Copilot completa):
========================================

☑ /wp-json/ accesible (HTTP 200):             [ ]
☑ /wp/v2/users/me devuelve 401 sin auth:      [ ]
☑ /wp/v2/pages / /wp/v2/posts accesibles:     [ ]
☑ SSL certificate válido y no expirado:       [ ]
☑ NO hay secrets expuestos en output:         [ ]

HALLAZGO: [Copilot rellena]
- REST API disponible: _______ (Sí/No)
- Autenticación requerida: _______ (Sí/No)
- Endpoints activos: _______ (cuántos)
- SSL válido: _______ (Sí/No, fecha expiración)
- Riesgos identificados: _______

---

PRÓXIMA ACCIÓN:
===============

Una vez validado que REST API funciona, Copilot/Owner puede proceder con:
1. Cargar WP_USER en GitHub Secrets
2. Cargar WP_APP_PASSWORD en GitHub Secrets
3. Ejecutar verify-* workflows con credenciales reales

